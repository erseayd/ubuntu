# -*- coding: utf-8 -*-

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
import images
import pymem
import pymem.process
import pymem.process 
import pymem.pattern
import pymem.memory
from pymem.ptypes import RemotePointer
from pymem.process import module_from_name
import os
import calendar
import datetime
import time
from time import sleep, strftime, gmtime
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
import webbrowser
from dateutil.relativedelta import relativedelta
from datetime import datetime
import datetime as dt
from keyauth import api 
import hashlib
import msedge
import win32api
import keyboard
import win32gui, win32process
from threading import *
import pydirectinput
import pygetwindow as gw
import win32con
import json
import requests
import winsound
import pyautogui
import cv2
import numpy as np

class RadarWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.radius = 40  # Varsayılan çember yarıçapı

    def set_radius(self, radius):
        """Çemberin yarıçapını ayarla ve yeniden çiz."""
        self.radius = radius
        self.update()

    def paintEvent(self, event):
        """Çemberi ve merkeze içi boş bir yeşil ok çizmek için QPainter kullan."""
        painter = QtGui.QPainter(self)
        painter.setRenderHint(QtGui.QPainter.Antialiasing)

        # Arkaplan
        painter.fillRect(self.rect(), QtGui.QColor(20, 20, 20))

        # Çemberi çiz
        pen = QtGui.QPen(QtGui.QColor(255, 255, 0))
        pen.setWidth(2)
        painter.setPen(pen)

        # Merkezi hesapla
        center = self.rect().center()
        diameter = self.radius * 2

        # Çember çiz
        painter.drawEllipse(
                center.x() - self.radius, center.y() - self.radius, diameter, diameter
        )

        # Merkezi bir içi boş ok ile işaretle
        pen.setColor(QtGui.QColor(27,118,255))  # Ok rengi yeşil
        painter.setBrush(QtGui.QColor(27,118,255)) # okun içi dolu olsun diye
        pen.setWidth(1)  # Okun kalınlığı
        painter.setPen(pen)
        #painter.setBrush(QtCore.Qt.NoBrush)  # Fırça boş olsun

        # Ok ucu koordinatları
        arrow_size = 6
        arrow_points = [
                QtCore.QPoint(center.x(), center.y() - arrow_size),  # Yukarıdaki nokta
                QtCore.QPoint(center.x() - arrow_size, center.y() + arrow_size),  # Sol alt
                QtCore.QPoint(center.x() + arrow_size, center.y() + arrow_size),  # Sağ alt
        ]

        # Üçgen şeklinde içi boş oku çiz
        painter.drawPolygon(QtGui.QPolygon(arrow_points))

class Clicker:
    def __init__(self):
        self.captcha_image = "./resimler/captcha.png"
        self.revive_image = "./resimler/revive.png"

    def find_image_on_screen(self, template_path):
        screenshot = pyautogui.screenshot()
        screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
        template = cv2.imread(template_path, cv2.IMREAD_UNCHANGED)
        if template is None:
            raise ValueError(f"Template image could not be loaded from path: {template_path}")
        if template.shape[-1] == 4:
            template = cv2.cvtColor(template, cv2.COLOR_BGRA2BGR)
        if screenshot.dtype != template.dtype:
            screenshot = screenshot.astype(template.dtype)
        result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)
        _, max_val, _, max_loc = cv2.minMaxLoc(result)
        if max_val > 0.7:
            return max_loc
        return None

    def click_on_image(self):
        # Önce captcha resmi araması yapılır
        location = self.find_image_on_screen(self.captcha_image)
        if location:
            template = cv2.imread(self.captcha_image, cv2.IMREAD_UNCHANGED)
            x, y = location
            time.sleep(0.5)
            pyautogui.leftClick(x + template.shape[1] // 2, y + template.shape[0] // 2)
            print("Captcha clicked!")
            pyautogui.moveTo(300, 400)
        else:
            # Eğer captcha bulunamazsa revive resmi aranır
            location = self.find_image_on_screen(self.revive_image)
            if location:
                template = cv2.imread(self.revive_image, cv2.IMREAD_UNCHANGED)
                x, y = location
                time.sleep(0.5)
                pyautogui.leftClick(x + template.shape[1] // 2, y + template.shape[0] // 2)
                print("Revive clicked!")
                pyautogui.moveTo(300, 400)
            else:
                print("Neither captcha nor revive found.")

class Clock:
    _instances = {}
    second = 0
    count = False
        
    def setUI(self,ui):
        self.ui = ui
        
    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(Clock, cls).__new__(cls)
        return cls.instance
    
    def startTime(self):
        self.count = True
        while self.count:
            self.second += 1
            self.ui.setText(str(strftime("%H:%M:%S",gmtime(self.second))))
            time.sleep(1)

    def stopTime(self):
        self.count = False

    def resetTime(self):
        self.second = 0
        self.ui.setText(str(strftime("00:00:00",gmtime(self.second))))
timer = Clock()



def getchecksum():
    path = os.path.basename(__file__)
    if not os.path.exists(path):
        path = ""
    md5_hash = hashlib.md5()
    a_file = open(path,"rb")
    content = a_file.read()
    md5_hash.update(content)
    digest = md5_hash.hexdigest()
    return digest
    
keyauthapp = api(
    name = "squtit", # Application Name
    ownerid = "gZQxKyJpWe", # Owner ID
    secret = "f8b908d7a5a69547551e0d71f476b578d231f2207da1d31c5d3ba88c61b4f25a", # Application Secret
    version = "1.0", # Application Version
    hash_to_check = getchecksum()
)

class DraggableMainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
    
    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def mousePressEvent(self, event):
        # Check for left button click to start drag
        if event.button() == QtCore.Qt.LeftButton:
            self.oldPos = event.globalPos()

    def mouseMoveEvent(self, event):
        # Allow dragging if oldPos is set
        if event.buttons() == QtCore.Qt.LeftButton and hasattr(self, 'oldPos'):
            delta = event.globalPos() - self.oldPos
            self.move(self.x() + delta.x(), self.y() + delta.y())
            self.oldPos = event.globalPos()

    def mouseReleaseEvent(self, event):
        # Clear oldPos to end dragging
        if event.button() == QtCore.Qt.LeftButton:
            if hasattr(self, 'oldPos'):
                del self.oldPos  # Remove oldPos instead of setting it to None


class Ui_MainWindow(object):

    update_player_value_signal = pyqtSignal(str)
    update_gamemaster_value_signal = pyqtSignal(str)
    def getUserData(self):
        self.timer = QTimer()
        self.timer.timeout.connect(self.getUserData)  # Connect the timer's timeout signal to the getUserData method 
        self.timer.start(1000)
        self.keyauthapp = msedge.keyauthapp
        lzaman = datetime.now()  # lzaman değişkenini baştan tanımla
        kalan_sure = ""  # Kalan süreyi saklamak için boş bir string
        try:
            if self.keyauthapp.user_data.expires:
                ast = float(self.keyauthapp.user_data.expires)
                key = datetime.fromtimestamp(ast)

                # Kalan Süre
                diff = relativedelta(key, lzaman)
                kalan_sure = "Bitiş: %d Ay %d Gün %d Saat %d Dakika" % (
                     diff.months, diff.days, diff.hours, diff.minutes
                )

            # kalan_sure sonucunu ilgili label'a atayın
            if hasattr(self, 'label_6'):
                self.label_6.setText(kalan_sure)
            else:
                print("label_6 bulunamadı.")
            
        except ValueError:
            # Eğer dönüşüm başarısız olursa bir hata mesajı göster
            print("Hata: geçersiz bitiş tarihi")  # Hata kontrolü
            if hasattr(self, 'label_6'):
                self.label_6.setText("Geçersiz bitiş tarihi")
        
        return kalan_sure


    def _basladur(self):
        if(self.basladur==True):
            self.basladur = False
            Thread(target=Clock().startTime,args=()).start()
        else:
            self.basladur = True 
            Clock().stopTime()

    def setupUi(self, MainWindow):
        self.basladur = True 
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.setWindowFlags(QtCore.Qt.WindowType.FramelessWindowHint)
        MainWindow.resize(504, 612)
        MainWindow.setMinimumSize(QtCore.QSize(504, 612))
        MainWindow.setMaximumSize(QtCore.QSize(504, 612))
        MainWindow.setSizeIncrement(QtCore.QSize(0, 0))
        MainWindow.setToolTip("")
        MainWindow.setStyleSheet("background-color:rgb(23,23,23);")
        MainWindow.setIconSize(QtCore.QSize(32, 32))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(23, 90, 481, 481))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(8)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("QTabWidget{\n"
"    color: rgba(35,35,35,255);\n"
"    background-color:rgb(23,23,23);\n"
"    margin: 0px;\n"
"    border: none;\n"
"}\n"
"\n"
"QTabWidget::pane{\n"
"    border-top: ;\n"
"}\n"
"\n"
"QTabBar::tab{\n"
"    background-color:rgb(23,23,23);\n"
"    min-width: 15ex;\n"
"    min-height: 5ex;\n"
"    padding: 5px 10px;\n"
"    color: rgb(150, 150, 150);\n"
"}\n"
"\n"
"\n"
"QTabBar::tab:hover {\n"
"        color: #ffffff;\n"
"}\n"
"\n"
"QTabBar::tab:selected{\n"
"    border-bottom: 3px solid rgb(27,118,255);\n"
"    color: white;\n"
"}\n"
"\n"
"QTabBar::tab:!selected{\n"
"    margin: 0px;\n"
"    background-color: rgb(20,20,20);\n"
"}\n"
"")
        self.tabWidget.setIconSize(QtCore.QSize(32, 32))
        self.tabWidget.setElideMode(QtCore.Qt.ElideLeft)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBox_42 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_42.setEnabled(True)
        self.groupBox_42.setGeometry(QtCore.QRect(220, 264, 241, 191))
        self.groupBox_42.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_42.setTitle("")
        self.groupBox_42.setFlat(False)
        self.groupBox_42.setCheckable(False)
        self.groupBox_42.setObjectName("groupBox_42")
        self.checkBox_74 = QtWidgets.QCheckBox(self.groupBox_42)
        self.checkBox_74.setGeometry(QtCore.QRect(10, 20, 161, 31))
        self.checkBox_74.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_74.setStyleSheet("QCheckBox {\n"
"    padding-right: 20x; \n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    qproperty-icon: url(:/files/k_pot.png);\n"
"    qproperty-iconSize: 30px 30px; \n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_74.setTristate(False)
        self.checkBox_74.setObjectName("checkBox_74")
        self.checkBox_75 = QtWidgets.QCheckBox(self.groupBox_42)
        self.checkBox_75.setGeometry(QtCore.QRect(10, 53, 161, 41))
        self.checkBox_75.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_75.setStyleSheet("QCheckBox {\n"
"    padding-right: 20x; \n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    qproperty-icon: url(:/files/m_pot.png);\n"
"    qproperty-iconSize: 30px 30px; \n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_75.setTristate(False)
        self.checkBox_75.setObjectName("checkBox_75")
        self.checkBox_76 = QtWidgets.QCheckBox(self.groupBox_42)
        self.checkBox_76.setGeometry(QtCore.QRect(10, 98, 181, 31))
        self.checkBox_76.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_76.setStyleSheet("QCheckBox {\n"
"    padding-right: 20x; \n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    qproperty-icon: url(:/files/eldiven.png);\n"
"    qproperty-iconSize: 30px 30px; \n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_76.setTristate(False)
        self.checkBox_76.setObjectName("checkBox_76")
        self.checkBox_77 = QtWidgets.QCheckBox(self.groupBox_42)
        self.checkBox_77.setGeometry(QtCore.QRect(10, 140, 161, 31))
        self.checkBox_77.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_77.setStyleSheet("QCheckBox {\n"
"    padding-right: 20x; \n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    qproperty-icon: url(:/files/skill2.png);\n"
"    qproperty-iconSize: 30px 30px; \n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_77.setTristate(False)
        self.checkBox_77.setObjectName("checkBox_77")
        self.groupBox_41 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_41.setEnabled(True)
        self.groupBox_41.setGeometry(QtCore.QRect(220, 14, 241, 171))
        self.groupBox_41.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_41.setFlat(False)
        self.groupBox_41.setCheckable(False)
        self.groupBox_41.setObjectName("groupBox_41")
        self.pushButton_35 = QtWidgets.QPushButton(self.groupBox_41)
        self.pushButton_35.setGeometry(QtCore.QRect(20, 110, 201, 41))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_35.setFont(font)
        self.pushButton_35.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_35.setToolTip("")
        self.pushButton_35.setToolTipDuration(-1)
        self.pushButton_35.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_35.setObjectName("pushButton_35")
        self.label_7 = QtWidgets.QLabel(self.groupBox_41)
        self.label_7.setGeometry(QtCore.QRect(20, 30, 31, 16))
        self.label_7.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.groupBox_41)
        self.label_8.setGeometry(QtCore.QRect(20, 69, 190, 13))
        self.label_8.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"")
        self.label_8.setObjectName("label_8")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_41)
        self.lineEdit.setGeometry(QtCore.QRect(46, 28, 71, 20))
        self.lineEdit.setStyleSheet("    border: None;\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(190,190,190);")
        self.lineEdit.setInputMethodHints(QtCore.Qt.ImhNone)
        self.lineEdit.setInputMask("")
        self.lineEdit.setMaxLength(32767)
        self.lineEdit.setFrame(True)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setClearButtonEnabled(False)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox_41)
        self.lineEdit_2.setGeometry(QtCore.QRect(75, 66, 160, 20))
        self.lineEdit_2.setStyleSheet("    border: None;\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(190,190,190);")
        self.lineEdit_2.setInputMethodHints(QtCore.Qt.ImhNone)
        self.lineEdit_2.setInputMask("")
        self.lineEdit_2.setMaxLength(32767)
        self.lineEdit_2.setFrame(True)
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setClearButtonEnabled(False)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.groupBox_25 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_25.setEnabled(True)
        self.groupBox_25.setGeometry(QtCore.QRect(220, 194, 241, 61))
        self.groupBox_25.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_25.setFlat(False)
        self.groupBox_25.setCheckable(False)
        self.groupBox_25.setObjectName("groupBox_25")
        self.radioButton_3 = QtWidgets.QRadioButton(self.groupBox_25)
        self.radioButton_3.setGeometry(QtCore.QRect(30, 22, 95, 20))
        self.radioButton_3.setStyleSheet("QRadioButton {\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QRadioButton::indicator::checked {\n"
"    image: url(:/files/radiochecked.png);\n"
"    width: 16px;\n"
"    height: 16px;\n"
"}\n"
"\n"
"QRadioButton::indicator::unchecked {\n"
"    image: url(:/files/radio.png);\n"
"    width: 16px;\n"
"    height: 16px;\n"
"}")
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.groupBox_25)
        self.radioButton_4.setGeometry(QtCore.QRect(141, 23, 95, 20))
        self.radioButton_4.setStyleSheet("QRadioButton {\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QRadioButton::indicator::checked {\n"
"    image: url(:/files/radiochecked.png);\n"
"    width: 16px;\n"
"    height: 16px;\n"
"}\n"
"\n"
"QRadioButton::indicator::unchecked {\n"
"    image: url(:/files/radio.png);\n"
"    width: 16px;\n"
"    height: 16px;\n"
"}")
        self.radioButton_4.setObjectName("radioButton_4")
        self.groupBox_15 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_15.setEnabled(True)
        self.groupBox_15.setGeometry(QtCore.QRect(0, 14, 211, 171))
        self.groupBox_15.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_15.setFlat(False)
        self.groupBox_15.setCheckable(False)
        self.groupBox_15.setObjectName("groupBox_15")
        self.checkBox_31 = QtWidgets.QCheckBox(self.groupBox_15)
        self.checkBox_31.setGeometry(QtCore.QRect(13, 27, 111, 17))
        self.checkBox_31.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_31.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_31.setTristate(False)
        self.checkBox_31.setObjectName("checkBox_31")
        self.checkBox_66 = QtWidgets.QCheckBox(self.groupBox_15)
        self.checkBox_66.setGeometry(QtCore.QRect(13, 55, 111, 17))
        self.checkBox_66.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_66.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_66.setTristate(False)
        self.checkBox_66.setObjectName("checkBox_66")
        self.checkBox_67 = QtWidgets.QCheckBox(self.groupBox_15)
        self.checkBox_67.setGeometry(QtCore.QRect(13, 83, 111, 17))
        self.checkBox_67.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_67.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_67.setTristate(False)
        self.checkBox_67.setObjectName("checkBox_67")
        self.checkBox_73 = QtWidgets.QCheckBox(self.groupBox_15)
        self.checkBox_73.setGeometry(QtCore.QRect(13, 113, 111, 17))
        self.checkBox_73.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_73.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_73.setTristate(False)
        self.checkBox_73.setObjectName("checkBox_73")
        self.checkBox_78 = QtWidgets.QCheckBox(self.groupBox_15)
        self.checkBox_78.setGeometry(QtCore.QRect(13, 142, 121, 17))
        self.checkBox_78.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_78.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_78.setTristate(False)
        self.checkBox_78.setObjectName("checkBox_78")
        self.groupBox_9 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_9.setGeometry(QtCore.QRect(0, 259, 211, 51))
        self.groupBox_9.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_9.setFlat(False)
        self.groupBox_9.setCheckable(False)
        self.groupBox_9.setObjectName("groupBox_9")
        self.checkBox_8 = QtWidgets.QCheckBox(self.groupBox_9)
        self.checkBox_8.setGeometry(QtCore.QRect(12, 20, 16, 17))
        self.checkBox_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_8.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_8.setText("")
        self.checkBox_8.setObjectName("checkBox_8")
        self.horizontalSlider_8 = QtWidgets.QSlider(self.groupBox_9)
        self.horizontalSlider_8.setEnabled(False)
        self.horizontalSlider_8.setGeometry(QtCore.QRect(40, 17, 141, 22))
        self.horizontalSlider_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_8.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"\n"
"QSlider::groove:horizontal {\n"
"border: none;\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"background-color: rgb(30,30,30);\n"
"height: 10px;\n"
"border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"border: 2px solid rgb(27,118,255);\n"
"width: 10px;\n"
"margin-top: -5px;\n"
"margin-bottom: -5px;\n"
"border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"border: 2px solid rgb(132, 132, 132);\n"
"}")
        self.horizontalSlider_8.setMinimum(1)
        self.horizontalSlider_8.setMaximum(10)
        self.horizontalSlider_8.setPageStep(1)
        self.horizontalSlider_8.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_8.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_8.setTickInterval(1)
        self.horizontalSlider_8.setObjectName("horizontalSlider_8")
        self.lineEdit_15 = QtWidgets.QLabel(self.groupBox_9)
        self.lineEdit_15.setGeometry(QtCore.QRect(187, 19, 18, 16))
        self.lineEdit_15.setStyleSheet("\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    font: 9pt \"Segoe UI\";\n"
"\n"
"")
        self.lineEdit_15.setObjectName("lineEdit_15")

        self.checkBox_8.toggled.connect(self.horizontalSlider_8.setEnabled)
        self.horizontalSlider_8.valueChanged.connect(lambda value: self.lineEdit_15.setText(str(value)))

        self.groupBox_16 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_16.setGeometry(QtCore.QRect(0, 324, 211, 51))
        self.groupBox_16.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_16.setFlat(False)
        self.groupBox_16.setCheckable(False)
        self.groupBox_16.setObjectName("groupBox_16")
        self.checkBox_10 = QtWidgets.QCheckBox(self.groupBox_16)
        self.checkBox_10.setGeometry(QtCore.QRect(12, 20, 16, 17))
        self.checkBox_10.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_10.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_10.setText("")
        self.checkBox_10.setObjectName("checkBox_10")

        self.horizontalSlider_11 = QtWidgets.QSlider(self.groupBox_16)
        self.horizontalSlider_11.setEnabled(False)
        self.horizontalSlider_11.setGeometry(QtCore.QRect(40, 17, 141, 22))
        self.horizontalSlider_11.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_11.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"\n"
"QSlider::groove:horizontal {\n"
"border: none;\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"background-color: rgb(30,30,30);\n"
"height: 10px;\n"
"border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"border: 2px solid rgb(27,118,255);\n"
"width: 10px;\n"
"margin-top: -5px;\n"
"margin-bottom: -5px;\n"
"border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"border: 2px solid rgb(132, 132, 132);\n"
"}")
        self.horizontalSlider_11.setMinimum(1)
        self.horizontalSlider_11.setMaximum(4)
        self.horizontalSlider_11.setPageStep(1)
        self.horizontalSlider_11.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_11.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_11.setTickInterval(1)
        self.horizontalSlider_11.setObjectName("horizontalSlider_11")
        self.lineEdit_24 = QtWidgets.QLabel(self.groupBox_16)
        self.lineEdit_24.setGeometry(QtCore.QRect(187, 19, 18, 16))
        self.lineEdit_24.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    font: 9pt \"Segoe UI\";\n"
"}\n"
"")
        self.lineEdit_24.setObjectName("lineEdit_24")


        self.checkBox_10.toggled.connect(self.horizontalSlider_11.setEnabled)
        self.horizontalSlider_11.valueChanged.connect(lambda value: self.lineEdit_24.setText(str(value)))

        self.groupBox_12 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_12.setGeometry(QtCore.QRect(0, 384, 211, 71))
        self.groupBox_12.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_12.setTitle("")
        self.groupBox_12.setObjectName("groupBox_12")
        self.pushButton_22 = QtWidgets.QPushButton(self.groupBox_12)
        self.pushButton_22.setGeometry(QtCore.QRect(10, 20, 91, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_22.setFont(font)
        self.pushButton_22.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_22.setToolTip("")
        self.pushButton_22.setToolTipDuration(-1)
        self.pushButton_22.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_22.setObjectName("pushButton_22")
        self.pushButton_22.clicked.connect(lambda : self.getUserData())
        self.pushButton_23 = QtWidgets.QPushButton(self.groupBox_12)
        self.pushButton_23.setEnabled(True)
        self.pushButton_23.setGeometry(QtCore.QRect(113, 20, 81, 31))
        self.pushButton_23.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_23.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_23.setObjectName("pushButton_23")
        self.pushButton_23.clicked.connect(self._basladur)
        self.groupBox_5 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_5.setGeometry(QtCore.QRect(0, 197, 211, 51))
        self.groupBox_5.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_5.setFlat(False)
        self.groupBox_5.setCheckable(False)
        self.groupBox_5.setObjectName("groupBox_5")
        self.checkBox_4 = QtWidgets.QCheckBox(self.groupBox_5)
        self.checkBox_4.setGeometry(QtCore.QRect(12, 20, 16, 17))
        self.checkBox_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_4.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_4.setText("")
        self.checkBox_4.setObjectName("checkBox_4")
        self.horizontalSlider_4 = QtWidgets.QSlider(self.groupBox_5)
        self.horizontalSlider_4.setEnabled(False)
        self.horizontalSlider_4.setGeometry(QtCore.QRect(40, 17, 141, 22))
        self.horizontalSlider_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_4.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"\n"
"QSlider::groove:horizontal {\n"
"border: none;\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"background-color: rgb(30,30,30);\n"
"height: 10px;\n"
"border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"border: 2px solid rgb(27,118,255);\n"
"width: 10px;\n"
"margin-top: -5px;\n"
"margin-bottom: -5px;\n"
"border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"border: 2px solid rgb(132, 132, 132);\n"
"}")
        self.horizontalSlider_4.setMinimum(1)
        self.horizontalSlider_4.setMaximum(10)
        self.horizontalSlider_4.setPageStep(1)
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_4.setTickInterval(1)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.lineEdit_14 = QtWidgets.QLabel(self.groupBox_5)
        self.lineEdit_14.setGeometry(QtCore.QRect(187, 19, 18, 16))
        self.lineEdit_14.setStyleSheet("border: none;\n"
"color: rgb(150, 150, 150);\n"
"background-color: rgb(40, 40, 40);"
"font: 9pt \"Segoe UI\";\n"
""
"")
        self.checkBox_4.toggled.connect(self.horizontalSlider_4.setEnabled)
        self.horizontalSlider_4.valueChanged.connect(lambda value: self.lineEdit_14.setText(str(value)))
        
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.tabWidget.addTab(self.tab, "")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.groupBox_37 = QtWidgets.QGroupBox(self.tab_1)
        self.groupBox_37.setEnabled(True)
        self.groupBox_37.setGeometry(QtCore.QRect(231, 330, 221, 121))
        self.groupBox_37.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_37.setFlat(False)
        self.groupBox_37.setCheckable(False)
        self.groupBox_37.setObjectName("groupBox_37")
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox_37)
        self.radioButton_2.setGeometry(QtCore.QRect(70, 90, 95, 20))
        self.radioButton_2.setStyleSheet("QRadioButton {\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QRadioButton::indicator::checked {\n"
"    image: url(:/files/radiochecked.png);\n"
"    width: 16px;\n"
"    height: 16px;\n"
"}\n"
"\n"
"QRadioButton::indicator::unchecked {\n"
"    image: url(:/files/radio.png);\n"
"    width: 16px;\n"
"    height: 16px;\n"
"}")
        self.radioButton_2.setObjectName("radioButton_2")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.groupBox_37)
        self.lineEdit_11.setGeometry(QtCore.QRect(20, 50, 71, 31))
        self.lineEdit_11.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_11.setText("")
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.groupBox_37)
        self.lineEdit_13.setGeometry(QtCore.QRect(124, 50, 71, 31))
        self.lineEdit_13.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_13.setText("")
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.label_31 = QtWidgets.QLabel(self.groupBox_37)
        self.label_31.setGeometry(QtCore.QRect(28, 30, 51, 20))
        self.label_31.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(40, 40, 40);")
        self.label_31.setObjectName("label_31")
        self.label_32 = QtWidgets.QLabel(self.groupBox_37)
        self.label_32.setGeometry(QtCore.QRect(129, 30, 61, 20))
        self.label_32.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(40, 40, 40);;")
        self.label_32.setObjectName("label_32")
        self.groupBox_38 = QtWidgets.QGroupBox(self.tab_1)
        self.groupBox_38.setEnabled(True)
        self.groupBox_38.setGeometry(QtCore.QRect(231, 22, 221, 291))
        self.groupBox_38.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_38.setFlat(False)
        self.groupBox_38.setCheckable(False)
        self.groupBox_38.setObjectName("groupBox_38")
        self.listWidget = QtWidgets.QListWidget(self.groupBox_38)
        self.listWidget.setGeometry(QtCore.QRect(10, 20, 201, 261))
        self.listWidget.setStyleSheet("border: none;\n"
"color: rgb(255, 255, 0);\n"
"background-color: rgb(30, 30, 30);")
        self.listWidget.setObjectName("listWidget")
        self.groupBox_14 = QtWidgets.QGroupBox(self.tab_1)
        self.groupBox_14.setGeometry(QtCore.QRect(0, 383, 211, 71))
        self.groupBox_14.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_14 = QtWidgets.QGroupBox(self.tab_1)
        self.groupBox_14.setGeometry(QtCore.QRect(0, 383, 211, 71))
        self.groupBox_14.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_14.setTitle("")
        self.groupBox_14.setObjectName("groupBox_14")
        self.pushButton_37 = QtWidgets.QPushButton(self.groupBox_14)
        self.pushButton_37.setGeometry(QtCore.QRect(10, 21, 91, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_37.setFont(font)
        self.pushButton_37.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_37.setToolTip("")
        self.pushButton_37.setToolTipDuration(-1)
        self.pushButton_37.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_37.setObjectName("pushButton_37")
        self.pushButton_38 = QtWidgets.QPushButton(self.groupBox_14)
        self.pushButton_38.setEnabled(True)
        self.pushButton_38.setGeometry(QtCore.QRect(113, 21, 81, 31))
        self.pushButton_38.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_38.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_38.setObjectName("pushButton_38")
        self.groupBox_39 = QtWidgets.QGroupBox(self.tab_1)
        self.groupBox_39.setEnabled(True)
        self.groupBox_39.setGeometry(QtCore.QRect(1, 87, 211, 231))
        self.groupBox_39.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_39.setFlat(False)
        self.groupBox_39.setCheckable(False)
        self.groupBox_39.setObjectName("groupBox_39")
        self.checkBox_68 = QtWidgets.QCheckBox(self.groupBox_39)
        self.checkBox_68.setGeometry(QtCore.QRect(16, 30, 131, 16))
        self.checkBox_68.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_68.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_68.setTristate(False)
        self.checkBox_68.setObjectName("checkBox_68")
        self.pushButton_39 = QtWidgets.QPushButton(self.groupBox_39)
        self.pushButton_39.setGeometry(QtCore.QRect(40, 180, 121, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_39.setFont(font)
        self.pushButton_39.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_39.setToolTip("")
        self.pushButton_39.setToolTipDuration(-1)
        self.pushButton_39.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_39.setObjectName("pushButton_39")
        self.pushButton_39.clicked.connect(self.auto_screen_scale)
        self.checkBox_69 = QtWidgets.QCheckBox(self.groupBox_39)
        self.checkBox_69.setGeometry(QtCore.QRect(16, 57, 140, 17))
        self.checkBox_69.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_69.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_69.setTristate(False)
        self.checkBox_69.setObjectName("checkBox_69")
        self.checkBox_70 = QtWidgets.QCheckBox(self.groupBox_39)
        self.checkBox_70.setGeometry(QtCore.QRect(16, 85, 121, 17))
        self.checkBox_70.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_70.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_70.setTristate(False)
        self.checkBox_70.setObjectName("checkBox_70")
        self.checkBox_71 = QtWidgets.QCheckBox(self.groupBox_39)
        self.checkBox_71.setGeometry(QtCore.QRect(16, 114, 121, 17))
        self.checkBox_71.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_71.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_71.setTristate(False)
        self.checkBox_71.setObjectName("checkBox_71")
        self.checkBox_72 = QtWidgets.QCheckBox(self.groupBox_39)
        self.checkBox_72.setGeometry(QtCore.QRect(17, 143, 121, 17))
        self.checkBox_72.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_72.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_72.setTristate(False)
        self.checkBox_72.setObjectName("checkBox_72")
        self.groupBox_7 = QtWidgets.QGroupBox(self.tab_1)
        self.groupBox_7.setGeometry(QtCore.QRect(0, 22, 211, 51))
        self.groupBox_7.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_7.setFlat(False)
        self.groupBox_7.setCheckable(False)
        self.groupBox_7.setObjectName("groupBox_7")
        self.checkBox_9 = QtWidgets.QCheckBox(self.groupBox_7)
        self.checkBox_9.setGeometry(QtCore.QRect(12, 20, 16, 17))
        self.checkBox_9.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_9.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_9.setText("")
        self.checkBox_9.setObjectName("checkBox_9")
        self.horizontalSlider_6 = QtWidgets.QSlider(self.groupBox_7)
        self.horizontalSlider_6.setEnabled(False)
        self.horizontalSlider_6.setGeometry(QtCore.QRect(40, 17, 141, 22))
        self.horizontalSlider_6.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_6.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"\n"
"QSlider::groove:horizontal {\n"
"border: none;\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"background-color: rgb(30,30,30);\n"
"height: 10px;\n"
"border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"border: 2px solid rgb(27,118,255);\n"
"width: 10px;\n"
"margin-top: -5px;\n"
"margin-bottom: -5px;\n"
"border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"border: 2px solid rgb(132, 132, 132);\n"
"}")
        self.horizontalSlider_6.setMinimum(1)
        self.horizontalSlider_6.setMaximum(7)
        self.horizontalSlider_6.setPageStep(1)
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_6.setTickInterval(1)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        self.label_24 = QtWidgets.QLabel(self.groupBox_7)
        self.label_24.setGeometry(QtCore.QRect(187, 19, 18, 16))
        self.label_24.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    font: 9pt \"Segoe UI\";\n"
"}\n"
"")
        self.label_24.setObjectName("label_24")
        self.checkBox_9.toggled.connect(self.horizontalSlider_6.setEnabled)
        self.horizontalSlider_6.valueChanged.connect(lambda value: self.label_24.setText(str(value)))

        self.groupBox_8 = QtWidgets.QGroupBox(self.tab_1)
        self.groupBox_8.setGeometry(QtCore.QRect(1, 327, 211, 51))
        self.groupBox_8.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_8.setFlat(False)
        self.groupBox_8.setCheckable(False)
        self.groupBox_8.setObjectName("groupBox_8")
        self.checkBox_11 = QtWidgets.QCheckBox(self.groupBox_8)
        self.checkBox_11.setGeometry(QtCore.QRect(12, 20, 16, 17))
        self.checkBox_11.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_11.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_11.setText("")
        self.checkBox_11.setObjectName("checkBox_11")
        self.horizontalSlider_7 = QtWidgets.QSlider(self.groupBox_8)
        self.horizontalSlider_7.setEnabled(False)
        self.horizontalSlider_7.setGeometry(QtCore.QRect(40, 17, 141, 22))
        self.horizontalSlider_7.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_7.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"\n"
"QSlider::groove:horizontal {\n"
"border: none;\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"background-color: rgb(30,30,30);\n"
"height: 10px;\n"
"border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"border: 2px solid rgb(27,118,255);\n"
"width: 10px;\n"
"margin-top: -5px;\n"
"margin-bottom: -5px;\n"
"border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"border: 2px solid rgb(132, 132, 132);\n"
"}")
        self.horizontalSlider_7.setMinimum(2)  # 1 * 2
        self.horizontalSlider_7.setMaximum(10)  # 10 * 2
        self.horizontalSlider_7.setSingleStep(1)
        self.horizontalSlider_7.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_7.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_7.setTickInterval(1)
        self.horizontalSlider_7.setObjectName("horizontalSlider_7")
        self.label_25 = QtWidgets.QLabel(self.groupBox_8)
        self.label_25.setGeometry(QtCore.QRect(187, 19, 18, 16))
        self.label_25.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    font: 9pt \"Segoe UI\";\n"
"}\n"
"")
        self.label_25.setObjectName("label_25")

        self.label_25.setObjectName("label_25")
        self.checkBox_11.toggled.connect(self.horizontalSlider_7.setEnabled)
        self.horizontalSlider_7.valueChanged.connect(lambda value: self.label_25.setText(str(value / 2)))

        self.tabWidget.addTab(self.tab_1, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.groupBox_23 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_23.setEnabled(True)
        self.groupBox_23.setGeometry(QtCore.QRect(228, 10, 241, 291))
        self.groupBox_23.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_23.setFlat(False)
        self.groupBox_23.setCheckable(False)
        self.groupBox_23.setObjectName("groupBox_23")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.groupBox_23)
        self.lineEdit_12.setGeometry(QtCore.QRect(10, 80, 101, 31))
        self.lineEdit_12.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_12.setText("")
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.pushButton_24 = QtWidgets.QPushButton(self.groupBox_23)
        self.pushButton_24.setGeometry(QtCore.QRect(9, 30, 101, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_24.setFont(font)
        self.pushButton_24.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_24.setToolTip("")
        self.pushButton_24.setToolTipDuration(-1)
        self.pushButton_24.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_24.setObjectName("pushButton_24")
        self.pushButton_24.clicked.connect(self.start_recording)
        self.pushButton_25 = QtWidgets.QPushButton(self.groupBox_23)
        self.pushButton_25.setGeometry(QtCore.QRect(118, 30, 111, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_25.setFont(font)
        self.pushButton_25.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_25.setToolTip("")
        self.pushButton_25.setToolTipDuration(-1)
        self.pushButton_25.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_25.setObjectName("pushButton_25")
        self.pushButton_25.clicked.connect(self.stop_recording)
        self.pushButton_26 = QtWidgets.QPushButton(self.groupBox_23)
        self.pushButton_26.setGeometry(QtCore.QRect(118, 84, 51, 23))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_26.setFont(font)
        self.pushButton_26.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_26.setToolTip("")
        self.pushButton_26.setToolTipDuration(-1)
        self.pushButton_26.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_26.setObjectName("pushButton_26")
        self.pushButton_26.clicked.connect(self.save_route)
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_23)
        self.comboBox_2.setGeometry(QtCore.QRect(10, 120, 221, 31))
        self.comboBox_2.setStyleSheet("""
    QComboBox {
        background-color: rgb(20, 20, 20); /* Arka plan rengi */
        color: rgb(255, 255, 255);
        padding: 5px; /* İç boşluk */
        border-radius: 5px; /* Köşe yuvarlatma */
    }

    QComboBox::drop-down {
        background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */
        width: 20px; /* Genişlik */
        border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */
    }

    QComboBox::down-arrow {
        image: url(:/files/arrow2.png); /* Özel ok simgesi */
        width: 16px; /* Ok genişliği */
        height: 35px; /* Ok yüksekliği */
    }

    QComboBox QAbstractItemView {
        background-color: rgb(40, 40, 40); /* Seçim menüsü arka plan rengi */
        color: rgb(255, 255, 255); /* Seçim menüsü metin rengi */
    }

    QComboBox QAbstractItemView::item {
        padding: 5px; /* İç boşluk */
    }

    QComboBox QAbstractItemView::item:selected {
        background-color: rgb(60, 60, 60); /* Seçilen öğe arka plan rengi */
        color: rgb(255, 255, 255); /* Seçilen öğe metin rengi */
    }
""")
        self.comboBox_2.setObjectName("comboBox_2")
        self.label_9 = QtWidgets.QLabel(self.groupBox_23)
        self.label_9.setGeometry(QtCore.QRect(10, 160, 91, 20))
        self.label_9.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_9.setObjectName("label_9")
        self.pushButton_27 = QtWidgets.QPushButton(self.groupBox_23)
        self.pushButton_27.setGeometry(QtCore.QRect(10, 190, 221, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_27.setFont(font)
        self.pushButton_27.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_27.setToolTip("")
        self.pushButton_27.setToolTipDuration(-1)
        self.pushButton_27.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_27.setObjectName("pushButton_27")
        self.pushButton_27.clicked.connect(self.start_selected_route)
        self.pushButton_29 = QtWidgets.QPushButton(self.groupBox_23)
        self.pushButton_29.setGeometry(QtCore.QRect(10, 240, 221, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_29.setFont(font)
        self.pushButton_29.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_29.setToolTip("")
        self.pushButton_29.setToolTipDuration(-1)
        self.pushButton_29.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_29.setObjectName("pushButton_29")
        self.pushButton_29.clicked.connect(self.stop_selected_route)
        self.groupBox_43 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_43.setEnabled(True)
        self.groupBox_43.setGeometry(QtCore.QRect(1, 10, 221, 251))
        self.groupBox_43.setStyleSheet("QGroupBox{\n"
        "    background-color: rgb(40, 40, 40);\n"
        "    color: rgb(150, 150, 150);\n"
        "    margin:3px;\n"
        "    border-radius: 0px;\n"
        "}\n"
        "\n"
        "QGroupBox::title\n"
        "{\n"
        "    bottom: 5px;\n"
        "    left: 7px;\n"
        "}")
        self.groupBox_43.setFlat(False)
        self.groupBox_43.setCheckable(False)
        self.groupBox_43.setObjectName("groupBox_43")

        # RadarWidget'i plainTextEdit_4 yerine ekle
        self.radar = RadarWidget(self.groupBox_43)
        self.radar.setGeometry(QtCore.QRect(10, 18, 201, 193))
        self.radar.setObjectName("radar")

        self.horizontalSlider_12 = QtWidgets.QSlider(self.groupBox_43)
        self.horizontalSlider_12.setEnabled(True)
        self.horizontalSlider_12.setGeometry(QtCore.QRect(11, 220, 165, 22))
        self.horizontalSlider_12.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_12.setStyleSheet("QSlider{\n"
        "background-color: None;\n"
        "}\n"
        "\n"
        "QSlider::groove:horizontal {\n"
        "border: none;\n"
        "height: 4px;\n"
        "border-radius: 3px;\n"
        "}\n"
        "\n"
        "QSlider::sub-page:horizontal {\n"
        "background-color: rgb(27,118,255);\n"
        "height: 4px;\n"
        "border-radius: 3px;\n"
        "}\n"
        "\n"
        "QSlider::sub-page:horizontal:disabled {\n"
        "background-color: rgb(132, 132, 132);\n"
        "height: 4px;\n"
        "border-radius: 3px;\n"
        "}\n"
        "\n"
        "QSlider::add-page:horizontal {\n"
        "background-color: rgb(30,30,30);\n"
        "height: 10px;\n"
        "border-radius: 5px;\n"
        "}\n"
        "\n"
        "QSlider::handle:horizontal {\n"
        "background-color: rgb(27,118,255);\n"
        "border: 2px solid rgb(27,118,255);\n"
        "width: 10px;\n"
        "margin-top: -5px;\n"
        "margin-bottom: -5px;\n"
        "border-radius: 6px;\n"
        "}\n"
        "\n"
        "QSlider::handle:horizontal:disabled {\n"
        "background-color: rgb(132, 132, 132);\n"
        "border: 2px solid rgb(132, 132, 132);\n"
        "}")
        self.horizontalSlider_12.setMinimum(30)
        self.horizontalSlider_12.setMaximum(85)  # Maksimum çapı ayarlayın
        self.horizontalSlider_12.setPageStep(1)
        self.horizontalSlider_12.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_12.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_12.setTickInterval(10)
        self.horizontalSlider_12.setObjectName("horizontalSlider_12")

        # Radar çapını güncellemek için slider sinyalini bağla
        self.horizontalSlider_12.valueChanged.connect(self.radar.set_radius)
        self.horizontalSlider_12.valueChanged.connect(lambda value: self.label_33.setText(str(value)))

        self.label_33 = QtWidgets.QLabel(self.groupBox_43)
        self.label_33.setGeometry(QtCore.QRect(194, 222, 16, 16))
        self.label_33.setStyleSheet("QLabel{\n"
        "    color: rgb(150, 150, 150);\n"
        "    background-color: None;\n"
        "    font: 9pt \"Segoe UI\";\n"
        "}\n"
        "")
        self.label_33.setObjectName("label_33")
        self.pushButton_28 = QtWidgets.QPushButton(self.groupBox_23)
        self.pushButton_28.setGeometry(QtCore.QRect(178, 84, 51, 23))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_28.setFont(font)
        self.pushButton_28.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_28.setToolTip("")
        self.pushButton_28.setToolTipDuration(-1)
        self.pushButton_28.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_28.setObjectName("pushButton_28")
        self.pushButton_28.clicked.connect(self.delete_route)
        self.groupBox_10 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_10.setGeometry(QtCore.QRect(228, 309, 241, 51))
        self.groupBox_10.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_10.setFlat(False)
        self.groupBox_10.setCheckable(False)
        self.groupBox_10.setObjectName("groupBox_10")
        self.checkBox_12 = QtWidgets.QCheckBox(self.groupBox_10)
        self.checkBox_12.setGeometry(QtCore.QRect(12, 20, 16, 17))
        self.checkBox_12.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_12.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_12.setText("")
        self.checkBox_12.setObjectName("checkBox_12")
        self.horizontalSlider_9 = QtWidgets.QSlider(self.groupBox_10)
        self.horizontalSlider_9.setEnabled(False)
        self.horizontalSlider_9.setGeometry(QtCore.QRect(40, 17, 161, 22))
        self.horizontalSlider_9.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_9.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"\n"
"QSlider::groove:horizontal {\n"
"border: none;\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"background-color: rgb(30,30,30);\n"
"height: 10px;\n"
"border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"border: 2px solid rgb(27,118,255);\n"
"width: 10px;\n"
"margin-top: -5px;\n"
"margin-bottom: -5px;\n"
"border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"border: 2px solid rgb(132, 132, 132);\n"
"}")
        self.horizontalSlider_9.setMinimum(1)
        self.horizontalSlider_9.setMaximum(20)
        self.horizontalSlider_9.setPageStep(1)
        self.horizontalSlider_9.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_9.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_9.setTickInterval(1)
        self.horizontalSlider_9.setObjectName("horizontalSlider_9")
        self.label_26 = QtWidgets.QLabel(self.groupBox_10)
        self.label_26.setGeometry(QtCore.QRect(209, 19, 16, 16))
        self.label_26.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    font: 9pt \"Segoe UI\";\n"
"}\n"
"")
        self.label_26.setObjectName("label_26")
        self.checkBox_12.toggled.connect(self.horizontalSlider_9.setEnabled)
        self.horizontalSlider_9.valueChanged.connect(lambda value: self.label_26.setText(str(value)))
        self.groupBox_11 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_11.setGeometry(QtCore.QRect(228, 370, 241, 51))
        self.groupBox_11.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_11.setFlat(False)
        self.groupBox_11.setCheckable(False)
        self.groupBox_11.setObjectName("groupBox_11")
        self.checkBox_13 = QtWidgets.QCheckBox(self.groupBox_11)
        self.checkBox_13.setGeometry(QtCore.QRect(12, 20, 16, 17))
        self.checkBox_13.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_13.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_13.setText("")
        self.checkBox_13.setObjectName("checkBox_13")
        self.horizontalSlider_10 = QtWidgets.QSlider(self.groupBox_11)
        self.horizontalSlider_10.setEnabled(False)
        self.horizontalSlider_10.setGeometry(QtCore.QRect(40, 17, 161, 22))
        self.horizontalSlider_10.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.horizontalSlider_10.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"\n"
"QSlider::groove:horizontal {\n"
"border: none;\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"height: 4px;\n"
"border-radius: 3px;\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"background-color: rgb(30,30,30);\n"
"height: 10px;\n"
"border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"background-color: rgb(27,118,255);\n"
"border: 2px solid rgb(27,118,255);\n"
"width: 10px;\n"
"margin-top: -5px;\n"
"margin-bottom: -5px;\n"
"border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:disabled {\n"
"background-color: rgb(132, 132, 132);\n"
"border: 2px solid rgb(132, 132, 132);\n"
"}")
        self.horizontalSlider_10.setMinimum(1)
        self.horizontalSlider_10.setMaximum(20)
        self.horizontalSlider_10.setPageStep(1)
        self.horizontalSlider_10.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_10.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_10.setTickInterval(1)
        self.horizontalSlider_10.setObjectName("horizontalSlider_10")
        self.label_28 = QtWidgets.QLabel(self.groupBox_11)
        self.label_28.setGeometry(QtCore.QRect(209, 19, 16, 16))
        self.label_28.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"    font: 9pt \"Segoe UI\";\n"
"}\n"
"")
        self.label_28.setObjectName("label_28")
        self.checkBox_13.toggled.connect(self.horizontalSlider_10.setEnabled)
        self.horizontalSlider_10.valueChanged.connect(lambda value: self.label_28.setText(str(value)))
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.groupBox_28 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_28.setEnabled(True)
        self.groupBox_28.setGeometry(QtCore.QRect(220, 20, 241, 121))
        self.groupBox_28.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_28.setFlat(False)
        self.groupBox_28.setCheckable(False)
        self.groupBox_28.setObjectName("groupBox_28")
        self.lineEdit_16 = QtWidgets.QLineEdit(self.groupBox_28)
        self.lineEdit_16.setGeometry(QtCore.QRect(23, 32, 51, 21))
        self.lineEdit_16.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_16.setText("")
        self.lineEdit_16.setPlaceholderText("")
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.label_13 = QtWidgets.QLabel(self.groupBox_28)
        self.label_13.setGeometry(QtCore.QRect(9, 32, 16, 20))
        self.label_13.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.groupBox_28)
        self.label_14.setGeometry(QtCore.QRect(87, 33, 16, 20))
        self.label_14.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_14.setObjectName("label_14")
        self.lineEdit_18 = QtWidgets.QLineEdit(self.groupBox_28)
        self.lineEdit_18.setGeometry(QtCore.QRect(101, 33, 51, 21))
        self.lineEdit_18.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_18.setText("")
        self.lineEdit_18.setPlaceholderText("")
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.label_15 = QtWidgets.QLabel(self.groupBox_28)
        self.label_15.setGeometry(QtCore.QRect(164, 33, 16, 20))
        self.label_15.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_15.setObjectName("label_15")
        self.lineEdit_17 = QtWidgets.QLineEdit(self.groupBox_28)
        self.lineEdit_17.setGeometry(QtCore.QRect(178, 33, 51, 21))
        self.lineEdit_17.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);;\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_17.setText("")
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.pushButton_30 = QtWidgets.QPushButton(self.groupBox_28)
        self.pushButton_30.setGeometry(QtCore.QRect(10, 74, 221, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_30.setFont(font)
        self.pushButton_30.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_30.setToolTip("")
        self.pushButton_30.setToolTipDuration(-1)
        self.pushButton_30.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_30.setObjectName("pushButton_30")
        self.groupBox_30 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_30.setEnabled(True)
        self.groupBox_30.setGeometry(QtCore.QRect(-3, 86, 221, 61))
        self.groupBox_30.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_30.setFlat(False)
        self.groupBox_30.setCheckable(False)
        self.groupBox_30.setObjectName("groupBox_30")
        self.comboBox_4 = QtWidgets.QComboBox(self.groupBox_30)
        self.comboBox_4.setGeometry(QtCore.QRect(30, 20, 181, 31))
        self.comboBox_4.setStyleSheet("""
    QComboBox {
        background-color: rgb(20, 20, 20); /* Arka plan rengi */
        color: rgb(255, 255, 255);
        padding: 5px; /* İç boşluk */
        border-radius: 5px; /* Köşe yuvarlatma */
    }

    QComboBox::drop-down {
        background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */
        width: 20px; /* Genişlik */
        border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */
    }

    QComboBox::down-arrow {
        image: url(:/files/arrow2.png); /* Özel ok simgesi */
        width: 16px; /* Ok genişliği */
        height: 35px; /* Ok yüksekliği */
    }

    QComboBox QAbstractItemView {
        background-color: rgb(40, 40, 40); /* Seçim menüsü arka plan rengi */
        color: rgb(255, 255, 255); /* Seçim menüsü metin rengi */
    }

    QComboBox QAbstractItemView::item {
        padding: 5px; /* İç boşluk */
    }
    

    QComboBox QAbstractItemView::item:selected {
        background-color: rgb(60, 60, 60); /* Seçilen öğe arka plan rengi */
        color: rgb(255, 255, 255); /* Seçilen öğe metin rengi */
    }
""")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.setItemText(0, "")
        self.comboBox_4.addItem("Mavi Çelik")
        self.comboBox_4.addItem("Kyanit Zırhı")
        self.comboBox_4.addItem("Zodyak Zırhı")
        self.comboBox_4.addItem("Şeytan Boynuzu")
        self.comboBox_4.addItem("Azrail Zırhı")
        self.comboBox_4.addItem("Noel Kostümü")
        self.comboBox_4.addItem("Kobra Kostümü")
        self.comboBox_4.addItem("Jack Pumpkin Zırhı")
        self.checkBox_34 = QtWidgets.QCheckBox(self.groupBox_30)
        self.checkBox_34.setGeometry(QtCore.QRect(7, 29, 31, 17))
        self.checkBox_34.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_34.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_34.setText("")
        self.checkBox_34.setChecked(False)
        self.checkBox_34.setTristate(False)
        self.checkBox_34.setObjectName("checkBox_34")
        self.groupBox_29 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_29.setEnabled(True)
        self.groupBox_29.setGeometry(QtCore.QRect(-3, 20, 221, 61))
        self.groupBox_29.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_29.setFlat(False)
        self.groupBox_29.setCheckable(False)
        self.groupBox_29.setObjectName("groupBox_29")
        self.comboBox_3 = QtWidgets.QComboBox(self.groupBox_29)
        self.comboBox_3.setGeometry(QtCore.QRect(30, 20, 181, 31))
        self.comboBox_3.setStyleSheet("""
    QComboBox {
        background-color: rgb(20, 20, 20); /* Arka plan rengi */
        color: rgb(255, 255, 255);
        padding: 5px; /* İç boşluk */
        border-radius: 5px; /* Köşe yuvarlatma */
    }

    QComboBox::drop-down {
        background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */
        width: 20px; /* Genişlik */
        border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */
    }

    QComboBox::down-arrow {
        image: url(:/files/arrow2.png); /* Özel ok simgesi */
        width: 16px; /* Ok genişliği */
        height: 35px; /* Ok yüksekliği */
    }

    QComboBox QAbstractItemView {
        background-color: rgb(40, 40, 40); /* Seçim menüsü arka plan rengi */
        color: rgb(255, 255, 255); /* Seçim menüsü metin rengi */
    }

    QComboBox QAbstractItemView::item {
        padding: 5px; /* İç boşluk */
    }

    QComboBox QAbstractItemView::item:selected {
        background-color: rgb(60, 60, 60); /* Seçilen öğe arka plan rengi */
        color: rgb(255, 255, 255); /* Seçilen öğe metin rengi */
    }
""")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.setItemText(0, "")
        self.comboBox_3.addItem("Triton Kilici")
        self.comboBox_3.addItem("Zehir Kilici")
        self.comboBox_3.addItem("Yari-İnsan")
        self.comboBox_3.addItem("Ejderha Disi Kilici")
        self.comboBox_3.addItem("Runik Kilici")
        self.comboBox_3.addItem("Zodyak Kilici")
        self.comboBox_3.addItem("Kyanit Kilici")
        self.comboBox_3.addItem("Günes Palasi")
        self.checkBox_32 = QtWidgets.QCheckBox(self.groupBox_29)
        self.checkBox_32.setGeometry(QtCore.QRect(7, 27, 31, 17))
        self.checkBox_32.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_32.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_32.setText("")
        self.checkBox_32.setTristate(False)
        self.checkBox_32.setObjectName("checkBox_32")
        self.groupBox_19 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_19.setEnabled(True)
        self.groupBox_19.setGeometry(QtCore.QRect(220, 157, 241, 131))
        self.groupBox_19.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_19.setFlat(False)
        self.groupBox_19.setCheckable(False)
        self.groupBox_19.setObjectName("groupBox_19")
        self.label_16 = QtWidgets.QLabel(self.groupBox_19)
        self.label_16.setGeometry(QtCore.QRect(12, 21, 16, 20))
        self.label_16.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_16.setObjectName("label_16")
        self.lineEdit_20 = QtWidgets.QLineEdit(self.groupBox_19)
        self.lineEdit_20.setGeometry(QtCore.QRect(104, 22, 51, 21))
        self.lineEdit_20.setStyleSheet("border: none;\n"
"color: rgb(200,200,200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_20.setText("")
        self.lineEdit_20.setObjectName("lineEdit_20")
        self.label_17 = QtWidgets.QLabel(self.groupBox_19)
        self.label_17.setGeometry(QtCore.QRect(167, 22, 16, 20))
        self.label_17.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.groupBox_19)
        self.label_18.setGeometry(QtCore.QRect(90, 22, 16, 20))
        self.label_18.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_18.setObjectName("label_18")
        self.lineEdit_21 = QtWidgets.QLineEdit(self.groupBox_19)
        self.lineEdit_21.setGeometry(QtCore.QRect(26, 21, 51, 21))
        self.lineEdit_21.setStyleSheet("border: none;\n"
"color: rgb(200,200,200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_21.setText("")
        self.lineEdit_21.setObjectName("lineEdit_21")
        self.lineEdit_22 = QtWidgets.QLineEdit(self.groupBox_19)
        self.lineEdit_22.setGeometry(QtCore.QRect(181, 22, 51, 21))
        self.lineEdit_22.setStyleSheet("border: none;\n"
"color: rgb(200,200,200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_22.setText("")
        self.lineEdit_22.setObjectName("lineEdit_22")
        self.lineEdit_23 = QtWidgets.QLineEdit(self.groupBox_19)
        self.lineEdit_23.setGeometry(QtCore.QRect(10, 50, 101, 31))
        self.lineEdit_23.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_23.setText("")
        self.lineEdit_23.setObjectName("lineEdit_23")
        self.pushButton_31 = QtWidgets.QPushButton(self.groupBox_19)
        self.pushButton_31.setGeometry(QtCore.QRect(119, 55, 51, 23))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_31.setFont(font)
        self.pushButton_31.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_31.setToolTip("")
        self.pushButton_31.setToolTipDuration(-1)
        self.pushButton_31.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_31.setObjectName("pushButton_31")
        self.comboBox_5 = QtWidgets.QComboBox(self.groupBox_19)
        self.comboBox_5.setGeometry(QtCore.QRect(10, 90, 221, 31))
        self.comboBox_5.setStyleSheet("""
    QComboBox {
        background-color: rgb(20, 20, 20); /* Arka plan rengi */
        color: rgb(255, 255, 255);
        padding: 5px; /* İç boşluk */
        border-radius: 5px; /* Köşe yuvarlatma */
    }

    QComboBox::drop-down {
        background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */
        width: 20px; /* Genişlik */
        border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */
    }

    QComboBox::down-arrow {
        image: url(:/files/arrow2.png); /* Özel ok simgesi */
        width: 16px; /* Ok genişliği */
        height: 35px; /* Ok yüksekliği */
    }

    QComboBox QAbstractItemView {
        background-color: rgb(40, 40, 40); /* Seçim menüsü arka plan rengi */
        color: rgb(255, 255, 255); /* Seçim menüsü metin rengi */
    }

    QComboBox QAbstractItemView::item {
        padding: 5px; /* İç boşluk */
    }

    QComboBox QAbstractItemView::item:selected {
        background-color: rgb(60, 60, 60); /* Seçilen öğe arka plan rengi */
        color: rgb(255, 255, 255); /* Seçilen öğe metin rengi */
    }
""")
        self.comboBox_5.setObjectName("comboBox_5")
        self.pushButton_40 = QtWidgets.QPushButton(self.groupBox_19)
        self.pushButton_40.setGeometry(QtCore.QRect(179, 55, 51, 23))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_40.setFont(font)
        self.pushButton_40.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_40.setToolTip("")
        self.pushButton_40.setToolTipDuration(-1)
        self.pushButton_40.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_40.setObjectName("pushButton_40")
        self.pushButton_40.clicked.connect(self.delete_coordinate)
        self.groupBox_35 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_35.setEnabled(True)
        self.groupBox_35.setGeometry(QtCore.QRect(-2, 157, 221, 61))
        self.groupBox_35.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_35.setFlat(False)
        self.groupBox_35.setCheckable(False)
        self.groupBox_35.setObjectName("groupBox_35")
        self.comboBox_7 = QtWidgets.QComboBox(self.groupBox_35)
        self.comboBox_7.setGeometry(QtCore.QRect(30, 20, 181, 31))
        self.comboBox_7.setStyleSheet("QComboBox {\n"
"    background-color: rgb(20, 20, 20); /* Arka plan rengi */\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 5px; /* İç boşluk */\n"
"    border-radius: 5px; /* Köşe yuvarlatma */\n"
"}\n"
"\n"
"QComboBox::drop-down {\n"
"    background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */\n"
"    width: 20px; /* Genişlik */\n"
"    border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */\n"
"}\n"
"\n"
"QComboBox::down-arrow {\n"
"    image: url(:/files/arrow2.png); /* Özel ok simgesi */\n"
"    width: 16px; /* Ok genişliği */\n"
"    height: 35px; /* Ok yüksekliği */\n"
"}")
        self.comboBox_7.setObjectName("comboBox_7")
        self.checkBox_35 = QtWidgets.QCheckBox(self.groupBox_35)
        self.checkBox_35.setEnabled(False)
        self.checkBox_35.setGeometry(QtCore.QRect(7, 27, 31, 17))
        self.checkBox_35.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_35.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_35.setText("")
        self.checkBox_35.setCheckable(False)
        self.checkBox_35.setTristate(False)
        self.checkBox_35.setObjectName("checkBox_35")
        self.groupBox_36 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_36.setEnabled(True)
        self.groupBox_36.setGeometry(QtCore.QRect(-2, 226, 221, 61))
        self.groupBox_36.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_36.setFlat(False)
        self.groupBox_36.setCheckable(False)
        self.groupBox_36.setObjectName("groupBox_36")
        self.comboBox_8 = QtWidgets.QComboBox(self.groupBox_36)
        self.comboBox_8.setGeometry(QtCore.QRect(30, 20, 181, 31))
        self.comboBox_8.setStyleSheet("QComboBox {\n"
"    background-color: rgb(20, 20, 20); /* Arka plan rengi */\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 5px; /* İç boşluk */\n"
"    border-radius: 5px; /* Köşe yuvarlatma */\n"
"}\n"
"\n"
"QComboBox::drop-down {\n"
"    background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */\n"
"    width: 20px; /* Genişlik */\n"
"    border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */\n"
"}\n"
"\n"
"QComboBox::down-arrow {\n"
"    image: url(:/files/arrow2.png); /* Özel ok simgesi */\n"
"    width: 16px; /* Ok genişliği */\n"
"    height: 35px; /* Ok yüksekliği */\n"
"}")
        self.comboBox_8.setObjectName("comboBox_8")
        self.checkBox_36 = QtWidgets.QCheckBox(self.groupBox_36)
        self.checkBox_36.setGeometry(QtCore.QRect(8, 28, 31, 17))
        self.checkBox_36.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_36.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_36.setText("")
        self.checkBox_36.setCheckable(False)
        self.checkBox_36.setTristate(False)
        self.checkBox_36.setObjectName("checkBox_36")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.groupBox_20 = QtWidgets.QGroupBox(self.tab_4)
        self.groupBox_20.setEnabled(True)
        self.groupBox_20.setGeometry(QtCore.QRect(2, 236, 461, 211))
        self.groupBox_20.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_20.setFlat(False)
        self.groupBox_20.setCheckable(False)
        self.groupBox_20.setObjectName("groupBox_20")
        self.checkBox_60 = QtWidgets.QCheckBox(self.groupBox_20)
        self.checkBox_60.setGeometry(QtCore.QRect(231, 139, 185, 17))
        self.checkBox_60.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_60.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_60.setTristate(False)
        self.checkBox_60.setObjectName("checkBox_60")
        self.checkBox_56 = QtWidgets.QCheckBox(self.groupBox_20)
        self.checkBox_56.setGeometry(QtCore.QRect(231, 176, 170, 17))
        self.checkBox_56.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_56.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_56.setTristate(False)
        self.checkBox_56.setObjectName("checkBox_56")
        self.checkBox_59 = QtWidgets.QCheckBox(self.groupBox_20)
        self.checkBox_59.setGeometry(QtCore.QRect(232, 28, 111, 17))
        self.checkBox_59.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_59.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_59.setTristate(False)
        self.checkBox_59.setObjectName("checkBox_59")
        self.checkBox_57 = QtWidgets.QCheckBox(self.groupBox_20)
        self.checkBox_57.setGeometry(QtCore.QRect(231, 101, 111, 17))
        self.checkBox_57.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_57.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_57.setTristate(False)
        self.checkBox_57.setObjectName("checkBox_57")
        self.checkBox_58 = QtWidgets.QCheckBox(self.groupBox_20)
        self.checkBox_58.setGeometry(QtCore.QRect(231, 64, 151, 17))
        self.checkBox_58.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_58.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_58.setTristate(False)
        self.checkBox_58.setObjectName("checkBox_58")
        self.listWidget_3 = QtWidgets.QListWidget(self.groupBox_20)
        self.listWidget_3.setGeometry(QtCore.QRect(10, 22, 201, 171))
        self.listWidget_3.setStyleSheet("border: none;\n"
"color: rgb(255, 255, 0);\n"
"background-color: rgb(30, 30, 30);")
        self.listWidget_3.setObjectName("listWidget_3")
        self.groupBox_31 = QtWidgets.QGroupBox(self.tab_4)
        self.groupBox_31.setEnabled(True)
        self.groupBox_31.setGeometry(QtCore.QRect(2, 11, 461, 211))
        self.groupBox_31.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_31.setFlat(False)
        self.groupBox_31.setCheckable(False)
        self.groupBox_31.setObjectName("groupBox_31")
        self.checkBox_51 = QtWidgets.QCheckBox(self.groupBox_31)
        self.checkBox_51.setGeometry(QtCore.QRect(231, 24, 111, 17))
        self.checkBox_51.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_51.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_51.setTristate(False)
        self.checkBox_51.setObjectName("checkBox_51")
        self.checkBox_52 = QtWidgets.QCheckBox(self.groupBox_31)
        self.checkBox_52.setGeometry(QtCore.QRect(230, 60, 151, 17))
        self.checkBox_52.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_52.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_52.setTristate(False)
        self.checkBox_52.setObjectName("checkBox_52")
        self.checkBox_53 = QtWidgets.QCheckBox(self.groupBox_31)
        self.checkBox_53.setGeometry(QtCore.QRect(230, 97, 111, 17))
        self.checkBox_53.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_53.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_53.setTristate(False)
        self.checkBox_53.setObjectName("checkBox_53")
        self.checkBox_54 = QtWidgets.QCheckBox(self.groupBox_31)
        self.checkBox_54.setGeometry(QtCore.QRect(230, 135, 185, 17))
        self.checkBox_54.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_54.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_54.setTristate(False)
        self.checkBox_54.setObjectName("checkBox_54")
        self.checkBox_55 = QtWidgets.QCheckBox(self.groupBox_31)
        self.checkBox_55.setGeometry(QtCore.QRect(230, 172, 170, 17))
        self.checkBox_55.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_55.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_55.setTristate(False)
        self.checkBox_55.setObjectName("checkBox_55")
        self.listWidget_2 = QtWidgets.QListWidget(self.groupBox_31)
        self.listWidget_2.setGeometry(QtCore.QRect(10, 20, 201, 171))
        self.listWidget_2.setStyleSheet("border: none;\n"
"color: rgb(255, 255, 0);\n"
"background-color: rgb(30, 30, 30);")
        self.listWidget_2.setObjectName("listWidget_2")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.groupBox_26 = QtWidgets.QGroupBox(self.tab_5)
        self.groupBox_26.setEnabled(True)
        self.groupBox_26.setGeometry(QtCore.QRect(0, 20, 211, 211))
        self.groupBox_26.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_26.setFlat(False)
        self.groupBox_26.setCheckable(False)
        self.groupBox_26.setObjectName("groupBox_26")
        self.checkBox_33 = QtWidgets.QCheckBox(self.groupBox_26)
        self.checkBox_33.setGeometry(QtCore.QRect(10, 30, 111, 17))
        self.checkBox_33.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_33.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_33.setTristate(False)
        self.checkBox_33.setObjectName("checkBox_33")
        self.checkBox_44 = QtWidgets.QCheckBox(self.groupBox_26)
        self.checkBox_44.setGeometry(QtCore.QRect(10, 80, 111, 17))
        self.checkBox_44.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_44.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_44.setTristate(False)
        self.checkBox_44.setObjectName("checkBox_44")
        self.checkBox_45 = QtWidgets.QCheckBox(self.groupBox_26)
        self.checkBox_45.setGeometry(QtCore.QRect(10, 130, 111, 17))
        self.checkBox_45.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_45.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_45.setTristate(False)
        self.checkBox_45.setObjectName("checkBox_45")
        self.checkBox_46 = QtWidgets.QCheckBox(self.groupBox_26)
        self.checkBox_46.setGeometry(QtCore.QRect(10, 180, 111, 17))
        self.checkBox_46.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_46.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_46.setTristate(False)
        self.checkBox_46.setObjectName("checkBox_46")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox_26)
        self.lineEdit_3.setGeometry(QtCore.QRect(110, 26, 91, 31))
        self.lineEdit_3.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setCursorPosition(0)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox_26)
        self.lineEdit_4.setGeometry(QtCore.QRect(110, 75, 91, 31))
        self.lineEdit_4.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);\n"
"")
        self.lineEdit_4.setText("")
        self.lineEdit_4.setCursorPosition(0)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.groupBox_26)
        self.lineEdit_5.setGeometry(QtCore.QRect(110, 123, 91, 31))
        self.lineEdit_5.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_5.setText("")
        self.lineEdit_5.setCursorPosition(0)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.groupBox_26)
        self.lineEdit_6.setGeometry(QtCore.QRect(110, 169, 91, 31))
        self.lineEdit_6.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);\n"
"")
        self.lineEdit_6.setText("")
        self.lineEdit_6.setCursorPosition(0)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.groupBox_27 = QtWidgets.QGroupBox(self.tab_5)
        self.groupBox_27.setEnabled(True)
        self.groupBox_27.setGeometry(QtCore.QRect(240, 20, 211, 211))
        self.groupBox_27.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_27.setFlat(False)
        self.groupBox_27.setCheckable(False)
        self.groupBox_27.setObjectName("groupBox_27")
        self.checkBox_47 = QtWidgets.QCheckBox(self.groupBox_27)
        self.checkBox_47.setGeometry(QtCore.QRect(10, 30, 111, 17))
        self.checkBox_47.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_47.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_47.setTristate(False)
        self.checkBox_47.setObjectName("checkBox_47")
        self.checkBox_48 = QtWidgets.QCheckBox(self.groupBox_27)
        self.checkBox_48.setGeometry(QtCore.QRect(10, 80, 111, 17))
        self.checkBox_48.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_48.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_48.setTristate(False)
        self.checkBox_48.setObjectName("checkBox_48")
        self.checkBox_49 = QtWidgets.QCheckBox(self.groupBox_27)
        self.checkBox_49.setGeometry(QtCore.QRect(10, 130, 111, 17))
        self.checkBox_49.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_49.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_49.setTristate(False)
        self.checkBox_49.setObjectName("checkBox_49")
        self.checkBox_50 = QtWidgets.QCheckBox(self.groupBox_27)
        self.checkBox_50.setGeometry(QtCore.QRect(10, 180, 111, 17))
        self.checkBox_50.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_50.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_50.setTristate(False)
        self.checkBox_50.setObjectName("checkBox_50")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.groupBox_27)
        self.lineEdit_7.setGeometry(QtCore.QRect(110, 169, 91, 31))
        self.lineEdit_7.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_7.setText("")
        self.lineEdit_7.setCursorPosition(0)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.groupBox_27)
        self.lineEdit_8.setGeometry(QtCore.QRect(110, 26, 91, 31))
        self.lineEdit_8.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_8.setText("")
        self.lineEdit_8.setCursorPosition(0)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.groupBox_27)
        self.lineEdit_9.setGeometry(QtCore.QRect(110, 123, 91, 31))
        self.lineEdit_9.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_9.setText("")
        self.lineEdit_9.setCursorPosition(0)
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.groupBox_27)
        self.lineEdit_10.setGeometry(QtCore.QRect(110, 75, 91, 31))
        self.lineEdit_10.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);\n"
"")
        self.lineEdit_10.setText("")
        self.lineEdit_10.setCursorPosition(0)
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.groupBox_18 = QtWidgets.QGroupBox(self.tab_5)
        self.groupBox_18.setEnabled(True)
        self.groupBox_18.setGeometry(QtCore.QRect(0, 240, 451, 111))
        self.groupBox_18.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_18.setFlat(False)
        self.groupBox_18.setCheckable(False)
        self.groupBox_18.setObjectName("groupBox_18")
        self.lineEdit_31 = QtWidgets.QLineEdit(self.groupBox_18)
        self.lineEdit_31.setGeometry(QtCore.QRect(70, 20, 371, 31))
        self.lineEdit_31.setStyleSheet("border: none;\n"
"color: rgb(255, 255, 0);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_31.setText("")
        self.lineEdit_31.setObjectName("lineEdit_31")
        self.label_21 = QtWidgets.QLabel(self.groupBox_18)
        self.label_21.setGeometry(QtCore.QRect(11, 25, 31, 20))
        self.label_21.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_21.setObjectName("label_21")
        self.label_27 = QtWidgets.QLabel(self.groupBox_18)
        self.label_27.setGeometry(QtCore.QRect(9, 65, 51, 20))
        self.label_27.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_27.setObjectName("label_27")
        self.lineEdit_32 = QtWidgets.QLineEdit(self.groupBox_18)
        self.lineEdit_32.setGeometry(QtCore.QRect(70, 60, 61, 31))
        self.lineEdit_32.setStyleSheet("border: none;\n"
"color: rgb(255, 255, 0);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_32.setText("")
        self.lineEdit_32.setObjectName("lineEdit_32")
        self.pushButton_36 = QtWidgets.QPushButton(self.groupBox_18)
        self.pushButton_36.setGeometry(QtCore.QRect(142, 63, 141, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_36.setFont(font)
        self.pushButton_36.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_36.setToolTip("")
        self.pushButton_36.setToolTipDuration(-1)
        self.pushButton_36.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_36.setObjectName("pushButton_36")
        self.pushButton_44 = QtWidgets.QPushButton(self.groupBox_18)
        self.pushButton_44.setGeometry(QtCore.QRect(295, 63, 141, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_44.setFont(font)
        self.pushButton_44.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_44.setToolTip("")
        self.pushButton_44.setToolTipDuration(-1)
        self.pushButton_44.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_44.setObjectName("pushButton_44")
        self.tabWidget.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.groupBox_32 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_32.setEnabled(True)
        self.groupBox_32.setGeometry(QtCore.QRect(0, 10, 241, 181))
        self.groupBox_32.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_32.setFlat(False)
        self.groupBox_32.setCheckable(False)
        self.groupBox_32.setObjectName("groupBox_32")
        self.lineEdit_29 = QtWidgets.QLineEdit(self.groupBox_32)
        self.lineEdit_29.setGeometry(QtCore.QRect(10, 20, 101, 31))
        self.lineEdit_29.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_29.setText("")
        self.lineEdit_29.setObjectName("lineEdit_29")
        self.pushButton_32 = QtWidgets.QPushButton(self.groupBox_32)
        self.pushButton_32.setGeometry(QtCore.QRect(117, 23, 51, 23))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_32.setFont(font)
        self.pushButton_32.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_32.setToolTip("")
        self.pushButton_32.setToolTipDuration(-1)
        self.pushButton_32.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_32.setObjectName("pushButton_32")
        self.pushButton_32.clicked.connect(self.save_setting)
        self.comboBox_6 = QtWidgets.QComboBox(self.groupBox_32)
        self.comboBox_6.setGeometry(QtCore.QRect(10, 61, 221, 31))
        self.comboBox_6.setStyleSheet("""
    QComboBox {
        background-color: rgb(20, 20, 20); /* Arka plan rengi */
        color: rgb(255, 255, 255);
        padding: 5px; /* İç boşluk */
        border-radius: 5px; /* Köşe yuvarlatma */
    }

    QComboBox::drop-down {
        background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */
        width: 20px; /* Genişlik */
        border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */
    }

    QComboBox::down-arrow {
        image: url(:/files/arrow2.png); /* Özel ok simgesi */
        width: 16px; /* Ok genişliği */
        height: 35px; /* Ok yüksekliği */
    }

    QComboBox QAbstractItemView {
        background-color: rgb(40, 40, 40); /* Seçim menüsü arka plan rengi */
        color: rgb(255, 255, 255); /* Seçim menüsü metin rengi */
    }

    QComboBox QAbstractItemView::item {
        padding: 5px; /* İç boşluk */
    }

    QComboBox QAbstractItemView::item:selected {
        background-color: rgb(60, 60, 60); /* Seçilen öğe arka plan rengi */
        color: rgb(255, 255, 255); /* Seçilen öğe metin rengi */
    }
""")
        self.comboBox_6.setObjectName("comboBox_6")
        #self.comboBox_6.addItem("")
        self.label_19 = QtWidgets.QLabel(self.groupBox_32)
        self.label_19.setGeometry(QtCore.QRect(10, 100, 101, 20))
        self.label_19.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_19.setObjectName("label_19")
        self.pushButton_33 = QtWidgets.QPushButton(self.groupBox_32)
        self.pushButton_33.setGeometry(QtCore.QRect(10, 130, 221, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_33.setFont(font)
        self.pushButton_33.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_33.setToolTip("")
        self.pushButton_33.setToolTipDuration(-1)
        self.pushButton_33.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_33.setObjectName("pushButton_33")
        self.pushButton_33.clicked.connect(self.apply_setting)
        self.pushButton_41 = QtWidgets.QPushButton(self.groupBox_32)
        self.pushButton_41.setGeometry(QtCore.QRect(178, 23, 51, 23))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_41.setFont(font)
        self.pushButton_41.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_41.setToolTip("")
        self.pushButton_41.setToolTipDuration(-1)
        self.pushButton_41.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_41.setObjectName("pushButton_41")
        self.pushButton_41.clicked.connect(self.delete_setting)
        self.groupBox_33 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_33.setEnabled(True)
        self.groupBox_33.setGeometry(QtCore.QRect(0, 200, 241, 71))
        self.groupBox_33.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_33.setFlat(False)
        self.groupBox_33.setCheckable(False)
        self.groupBox_33.setObjectName("groupBox_33")
        self.lineEdit_19 = QtWidgets.QLineEdit(self.groupBox_33)
        self.lineEdit_19.setGeometry(QtCore.QRect(14, 29, 51, 21))
        self.lineEdit_19.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_19.setText("")
        self.lineEdit_19.setObjectName("lineEdit_19")
        self.label_20 = QtWidgets.QLabel(self.groupBox_33)
        self.label_20.setGeometry(QtCore.QRect(74, 30, 16, 20))
        self.label_20.setStyleSheet("color: rgb(180, 180, 180);\n"
"background-color: rgb(40, 40, 40);")
        self.label_20.setObjectName("label_20")
        self.lineEdit_26 = QtWidgets.QLineEdit(self.groupBox_33)
        self.lineEdit_26.setGeometry(QtCore.QRect(92, 30, 51, 21))
        self.lineEdit_26.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_26.setText("")
        self.lineEdit_26.setObjectName("lineEdit_26")
        self.pushButton_34 = QtWidgets.QPushButton(self.groupBox_33)
        self.pushButton_34.setGeometry(QtCore.QRect(158, 24, 71, 31))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_34.setFont(font)
        self.pushButton_34.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_34.setToolTip("")
        self.pushButton_34.setToolTipDuration(-1)
        self.pushButton_34.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_34.setObjectName("pushButton_34")
        self.groupBox_34 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_34.setEnabled(True)
        self.groupBox_34.setGeometry(QtCore.QRect(247, 11, 211, 181))
        self.groupBox_34.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_34.setFlat(False)
        self.groupBox_34.setCheckable(False)
        self.groupBox_34.setObjectName("groupBox_34")
        self.checkBox_61 = QtWidgets.QCheckBox(self.groupBox_34)
        self.checkBox_61.setGeometry(QtCore.QRect(10, 40, 111, 17))
        self.checkBox_61.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_61.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_61.setTristate(False)
        self.checkBox_61.setObjectName("checkBox_61")
        self.checkBox_62 = QtWidgets.QCheckBox(self.groupBox_34)
        self.checkBox_62.setGeometry(QtCore.QRect(10, 90, 111, 17))
        self.checkBox_62.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_62.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_62.setTristate(False)
        self.checkBox_62.setObjectName("checkBox_62")
        self.checkBox_63 = QtWidgets.QCheckBox(self.groupBox_34)
        self.checkBox_63.setGeometry(QtCore.QRect(10, 139, 111, 17))
        self.checkBox_63.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_63.setStyleSheet("QCheckBox{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_63.setTristate(False)
        self.checkBox_63.setObjectName("checkBox_63")
        self.lineEdit_27 = QtWidgets.QLineEdit(self.groupBox_34)
        self.lineEdit_27.setGeometry(QtCore.QRect(119, 34, 81, 31))
        self.lineEdit_27.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_27.setText("")
        self.lineEdit_27.setObjectName("lineEdit_27")
        self.lineEdit_28 = QtWidgets.QLineEdit(self.groupBox_34)
        self.lineEdit_28.setGeometry(QtCore.QRect(120, 83, 81, 31))
        self.lineEdit_28.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);")
        self.lineEdit_28.setText("")
        self.lineEdit_28.setObjectName("lineEdit_28")
        self.lineEdit_30 = QtWidgets.QLineEdit(self.groupBox_34)
        self.lineEdit_30.setGeometry(QtCore.QRect(120, 133, 81, 31))
        self.lineEdit_30.setStyleSheet("border: none;\n"
"color: rgb(200, 200, 200);\n"
"background-color: rgb(30, 30, 30);\n"
"")
        self.lineEdit_30.setText("")
        self.lineEdit_30.setObjectName("lineEdit_30")
        self.groupBox_40 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_40.setEnabled(True)
        self.groupBox_40.setGeometry(QtCore.QRect(248, 200, 211, 71))
        self.groupBox_40.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_40.setFlat(False)
        self.groupBox_40.setCheckable(False)
        self.groupBox_40.setObjectName("groupBox_40")
        self.pushButton_42 = QtWidgets.QPushButton(self.groupBox_40)
        self.pushButton_42.setGeometry(QtCore.QRect(20, 26, 171, 29))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_42.setFont(font)
        self.pushButton_42.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_42.setToolTip("")
        self.pushButton_42.setToolTipDuration(-1)
        self.pushButton_42.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_42.setObjectName("pushButton_42")
        self.groupBox_44 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_44.setEnabled(True)
        self.groupBox_44.setGeometry(QtCore.QRect(0, 280, 241, 111))
        self.groupBox_44.setStyleSheet("QGroupBox{\n"
"    background-color: rgb(40, 40, 40);\n"
"    color: rgb(150, 150, 150);\n"
"    margin:3px;\n"
"    border-radius: 0px;\n"
"}\n"
"\n"
"QGroupBox::title\n"
"{\n"
"    bottom: 5px;\n"
"    left: 7px;\n"
"}")
        self.groupBox_44.setFlat(False)
        self.groupBox_44.setCheckable(False)
        self.groupBox_44.setObjectName("groupBox_44")
        self.comboBox_9 = QtWidgets.QComboBox(self.groupBox_44)
        self.comboBox_9.setGeometry(QtCore.QRect(14, 22, 215, 31))
        self.comboBox_9.setStyleSheet("QComboBox {\n"
"    background-color: rgb(20, 20, 20); /* Arka plan rengi */\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 2px; /* İç boşluk */\n"
"    border-radius: 3px; /* Köşe yuvarlatma */\n"
"    image-position: left; /* Sol köşeye hizala */\n"
"    padding-left: 0px; /* Resmin sağında metin için boşluk bırak */\n"
"}\n"
"\n"
"QComboBox::drop-down {\n"
"    background-color: rgb(75, 75, 75); /* Aşağı ok simgesi arka plan rengi */\n"
"    width: 20px; /* Genişlik */\n"
"    border-left: 2px solid rgb(60, 60, 60); /* Ayrıcı kenarlık */\n"
"}\n"
"    QComboBox QAbstractItemView {\n"
"        background-color: rgb(40, 40, 40);\n"
"        color: rgb(255, 255, 255);\n"
"    }\n"

"    QComboBox QAbstractItemView::item {\n"
"        padding: 5px;\n"
"}\n"

"    QComboBox QAbstractItemView::item:selected {\n"
"        background-color: rgb(60, 60, 60);\n"
"        color: rgb(255, 255, 255);}\n"
"\n"
"QComboBox::down-arrow {\n"
"    image: url(:/files/arrow2.png); /* Özel ok simgesi */\n"
"    width: 16px; /* Ok genişliği */\n"
"    height: 35px; /* Ok yüksekliği */\n"
"}\n"
"")
        self.comboBox_9.setObjectName("comboBox_9")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("en.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap("en.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap("en.png"), QtGui.QIcon.Disabled, QtGui.QIcon.On)
        icon.addPixmap(QtGui.QPixmap("en.png"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
        self.comboBox_9.addItem(icon, "")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("tr.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap("tr.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap("tr.png"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
        self.comboBox_9.addItem(icon1, "")
        self.pushButton_43 = QtWidgets.QPushButton(self.groupBox_44)
        self.pushButton_43.setGeometry(QtCore.QRect(10, 70, 221, 29))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_43.setFont(font)
        self.pushButton_43.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_43.setToolTip("")
        self.pushButton_43.setToolTipDuration(-1)
        self.pushButton_43.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_43.setObjectName("pushButton_43")
        self.pushButton_43.clicked.connect(self.applyLanguageChange)
        self.tabWidget.addTab(self.tab_6, "")
        self.pushButton_20 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_20.setEnabled(True)
        self.pushButton_20.setGeometry(QtCore.QRect(437, 14, 21, 23))
        self.pushButton_20.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_20.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(100, 100, 100);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    background-color: rgb(120, 120, 120);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    background-color: rgb(150, 150, 150);\n"
"    color: rgb(255,255, 255);\n"
"}")
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_21 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_21.setGeometry(QtCore.QRect(467, 14, 21, 23))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pushButton_21.setFont(font)
        self.pushButton_21.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_21.setToolTip("")
        self.pushButton_21.setToolTipDuration(-1)
        self.pushButton_21.setStyleSheet("QPushButton{\n"
"    border: None;\n"
"    background-color: rgb(27,118,255);\n"
"    color: rgb(230,230,230);\n"
"}\n"
"\n"
"QPushButton::Hover{\n"
"    border: None;\n"
"    background-color: rgb(47,138,255);\n"
"    color: rgb(255,255,255);\n"
"}\n"
"\n"
"QPushButton::Pressed{\n"
"    border: None;\n"
"    background-color: rgb(15, 90, 255);\n"
"    color: rgb(230,230,230);\n"
"}")
        self.pushButton_21.setObjectName("pushButton_21")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(24, 22, 61, 61))
        self.widget.setStyleSheet("QWidget{\n"
"image: url(:/files/sav-erkek.png);\n"
"border: 1px solid;\n"
"border-color: rgb(100,100,100);\n"
"}\n"
"")
        self.widget.setObjectName("widget")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(99, 44, 60, 13))
        self.label_4.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"")
        self.label_4.setObjectName("label_4")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(99, 24, 90, 13))
        self.label.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"")
        self.label.setObjectName("label")
        self.label_29 = QtWidgets.QLabel(self.centralwidget)
        self.label_29.setGeometry(QtCore.QRect(99, 64, 41, 16))
        self.label_29.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"")
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.centralwidget)
        self.label_30.setGeometry(QtCore.QRect(135, 64, 51, 16))
        self.label_30.setStyleSheet("QLabel{\n"
"    color: rgb(150, 150, 150);\n"
"    background-color: None;\n"
"}\n"
"")
        self.label_30.setObjectName("label_30")
        Clock().setUI(self.label_30)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(26, 587, 191, 20))
        self.label_3.setStyleSheet("QLabel{\n"
"    background-color: None;\n"
"    color: rgb(240, 240, 240);\n"
"    font: 8pt \"Segoe UI\";\n"
"    text-decoration: underline;\n"
"    border: 0px solid none;\n"
"}")
        self.label_3.setObjectName("label_3")
        self.checkBox_43 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_43.setGeometry(QtCore.QRect(138, 589, 91, 17))
        self.checkBox_43.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.checkBox_43.setStyleSheet("QCheckBox{\n"
"    color: rgb(240, 240, 240);\n"
"    background-color: None;\n"
"}\n"
"\n"
"QCheckBox::indicator::checked {\n"
"    image: url(:/files/checked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator::unchecked {\n"
"    image: url(:/files/unchecked.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"")
        self.checkBox_43.setTristate(False)
        self.checkBox_43.setObjectName("checkBox_43")
        self.checkBox_43.clicked.connect(self.oneal)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(244, 585, 251, 20))
        self.label_6.setStyleSheet("QLabel{\n"
"    background-color: None;\n"
"    color: rgb(240, 240, 240);\n"
"    font: 8pt \"Segoe UI\";\n"
"    text-decoration: underline;\n"
"    border: 0px solid none;\n"
"}")
        self.label_6.setObjectName("label_6")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.pushButton_21.clicked.connect(MainWindow.close) # type: ignore
        self.pushButton_21.clicked.connect(QApplication.quit)
        self.pushButton_20.clicked.connect(MainWindow.showMinimized) # type: ignore
        
        #self.horizontalSlider.valueChanged.connect(self.rangebar)
        # self.pushButton_18.setObjectName("pushButton_18")
        self.pushButton_22.clicked.connect(self._basladur)
        # self.pushButton_18.clicked.connect(self.botaktif)
        # self.pushButton.clicked.connect(self.botdurdur)
        #self.pushButton_35.clicked.connect(self.map)
        # self.pushButton_18.clicked.connect(self.plist)


        # self.checkBox_13.clicked.connect(self.wt)
        # self.checkBox_9.clicked.connect(self.at) 


        # self.checkBox_8.clicked.connect(self.oh)
        # self.checkBox_7.clicked.connect(self.sa)

        # self.checkBox_6.clicked.connect(self.sc)   
                # Bağlantılar
        self.pushButton_31.clicked.connect(self.save_coordinates)
        self.comboBox_5.currentTextChanged.connect(self.load_coordinates)
        self.coordinates_file = "coordinates.json"
        self.load_coordinate_names()

        
        self.records = []  # Initialize the list of coordinates
        self.is_recording = False
        self.is_route_running = False
        self.json_file_path = ""  # File path for storing the coordinates
        self.pushButton_27.clicked.connect(self.start_selected_route)
        self.checkBox_8.clicked.connect(self.sh)     
        self.checkBox_4.clicked.connect(self.hh)
        self.checkBox_10.clicked.connect(self.kb)
        self.checkBox_31.clicked.connect(self.ss)
        self.checkBox_66.clicked.connect(self.cs)
        self.checkBox_67.clicked.connect(self.ts)
        self.checkBox_73.clicked.connect(self.bb)
        self.checkBox_77.clicked.connect(self.sk)
        self.checkBox_9.clicked.connect(self.anm)
        self.checkBox_32.clicked.connect(self.wt)
        self.checkBox_34.clicked.connect(self.at)
        self.checkBox_68.clicked.connect(self.pm)
        self.checkBox_71.clicked.connect(self.capa)
        self.checkBox_72.clicked.connect(self.rev)
        self.checkBox_78.clicked.connect(self.rev2)
        self.pushButton_36.clicked.connect(self.sp)
        self.pushButton_44.clicked.connect(self.stop_spam_function)
        self.pushButton_30.clicked.connect(self.tp)
        self.checkBox_12.clicked.connect(self.plyr)
        self.checkBox_12.clicked.connect(self.gm)
        self.pushButton_22.clicked.connect(self.Start)
        self.pushButton_23.clicked.connect(self.Stop)
        # self.checkBox_4.clicked.connect(self.ws)         
        # self.checkBox_5.clicked.connect(self.gwh)   
        # self.checkBox_10.clicked.connect(self.ohh)  
        # self.checkBox_38.clicked.connect(self.osh)   
        self.pushButton_34.clicked.connect(self.resze)
        #self.checkBox_43.clicked.connect(self.onal)
        self.checkBox_61.clicked.connect(self.okapat)
        self.checkBox_61.clicked.connect(self.okapat2)
        self.checkBox_62.clicked.connect(self.bkapat)
        self.checkBox_63.clicked.connect(self.pckpt)
        self.checkBox_76.clicked.connect(self.ototop)
        self.checkBox_74.clicked.connect(self.start_otopot1)
        self.checkBox_75.clicked.connect(self.start_otopot2)
        self.checkBox_33.clicked.connect(self.slt1)
        self.checkBox_44.clicked.connect(self.slt2)
        self.checkBox_45.clicked.connect(self.slt3)
        self.checkBox_46.clicked.connect(self.slt4)
        self.checkBox_47.clicked.connect(self.fslt1)
        self.checkBox_48.clicked.connect(self.fslt2)
        self.checkBox_49.clicked.connect(self.fslt3)
        self.checkBox_50.clicked.connect(self.fslt4)
        # self.checkBox_36.clicked.connect(self.otoskill1)
        # self.checkBox_36.clicked.connect(self.otoskill2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        def _pid():
                    win32api.MessageBox(0, 'Oyuna Geçip F12 Tuşuna Basın', 'Uyarı')       
                    while self.lineEdit != 0 :
                        sleep(0.1)
                        if keyboard.is_pressed('F12'):
                            pids = win32process.GetWindowThreadProcessId(win32gui.GetForegroundWindow())
                            text = win32gui.GetWindowText (win32gui.GetForegroundWindow())
                            print(text)
                            self.lineEdit.setText(str(pids[-1]))
                            self.lineEdit_2.setText(text)
                            self.label_7.setText("PID: " + str(pids[-1]))
                            break        
        self.pushButton_35.clicked.connect(_pid)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "msedge"))
        self.checkBox_74.setText(_translate("MainWindow", "Red Potion (F3)"))
        self.checkBox_75.setText(_translate("MainWindow", "Blue Potion(F4)"))
        self.checkBox_76.setText(_translate("MainWindow", "Auto Pickup"))
        self.checkBox_77.setText(_translate("MainWindow", "Auto Skill"))
        self.groupBox_41.setTitle(_translate("MainWindow", "Servers"))
        self.pushButton_35.setText(_translate("MainWindow", "PID (F12)"))
        self.label_7.setText(_translate("MainWindow", "PID: "))
        self.label_8.setText(_translate("MainWindow", "Window: "))
        self.groupBox_25.setTitle(_translate("MainWindow", "Type"))
        self.radioButton_3.setText(_translate("MainWindow", "Farmbot"))
        self.radioButton_4.setText(_translate("MainWindow", "Stone"))
        self.groupBox_15.setTitle(_translate("MainWindow", "Farm Options"))
        self.checkBox_31.setText(_translate("MainWindow", "Skill Hızı"))
        self.checkBox_66.setText(_translate("MainWindow", "Camera Speed"))
        self.checkBox_67.setText(_translate("MainWindow", "Turn Speed"))
        self.checkBox_73.setText(_translate("MainWindow", "Buggs Bunny"))
        self.checkBox_78.setText(_translate("MainWindow", "Auto Revive"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Attack Speed"))
        self.groupBox_10.setTitle(_translate("MainWindow", "Wait Damage"))
        self.lineEdit_15.setText(_translate("MainWindow", "0"))
        self.groupBox_16.setTitle(_translate("MainWindow", "Character Scale"))
        self.lineEdit_24.setText(_translate("MainWindow", "0"))
        self.pushButton_22.setText(_translate("MainWindow", "Start"))
        self.pushButton_23.setText(_translate("MainWindow", "Stop"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Movement Speed"))
        self.lineEdit_14.setText(_translate("MainWindow", "0"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Farm"))
        self.groupBox_37.setTitle(_translate("MainWindow", "Random Time"))
        self.radioButton_2.setText(_translate("MainWindow", "Activate"))
        self.lineEdit_11.setPlaceholderText(_translate("MainWindow", "second"))
        self.lineEdit_13.setPlaceholderText(_translate("MainWindow", "second"))
        self.label_31.setText(_translate("MainWindow", "Minimum"))
        self.label_32.setText(_translate("MainWindow", "Maximum"))
        self.groupBox_38.setTitle(_translate("MainWindow", "Log"))
        self.pushButton_37.setText(_translate("MainWindow", "Start"))
        self.pushButton_38.setText(_translate("MainWindow", "Stop"))
        self.groupBox_39.setTitle(_translate("MainWindow", "Alert"))
        self.checkBox_68.setText(_translate("MainWindow", "PM Notification"))
        self.pushButton_39.setText(_translate("MainWindow", "Auto Screen Scale"))
        self.checkBox_69.setText(_translate("MainWindow", "Skip Hair Color"))
        self.checkBox_70.setText(_translate("MainWindow", "Kill Fish"))
        self.checkBox_71.setText(_translate("MainWindow", "Captcha Solver"))
        self.checkBox_72.setText(_translate("MainWindow", "Auto Revive"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Animation Speed"))
        self.label_24.setText(_translate("MainWindow", "0"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Delay (Second)"))
        self.label_25.setText(_translate("MainWindow", "0"))
        self.label_26.setText(_translate("MainWindow", "0"))
        self.groupBox_11.setTitle(_translate("MainWindow", "Wait Range"))
        self.label_28.setText(_translate("MainWindow", "0"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("MainWindow", "Fish"))
        self.groupBox_23.setTitle(_translate("MainWindow", "Route"))
        self.lineEdit_12.setPlaceholderText(_translate("MainWindow", "Route Name"))
        self.pushButton_24.setText(_translate("MainWindow", "Start Record"))
        self.pushButton_25.setText(_translate("MainWindow", "Stop Record"))
        self.pushButton_26.setText(_translate("MainWindow", "SAVE"))
        self.pushButton_28.setText(_translate("MainWindow", "DELETE"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", ""))
        self.label_9.setText(_translate("MainWindow", "Selected Route:"))
        self.pushButton_27.setText(_translate("MainWindow", "Start"))
        self.pushButton_29.setText(_translate("MainWindow", "Stop"))
        self.groupBox_43.setTitle(_translate("MainWindow", "Map"))
        self.label_33.setText(_translate("MainWindow", "0"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Route"))
        self.groupBox_28.setTitle(_translate("MainWindow", "Manuel Teleport"))
        self.label_13.setText(_translate("MainWindow", "X:"))
        self.label_14.setText(_translate("MainWindow", "Y:"))
        self.label_15.setText(_translate("MainWindow", "Z:"))
        self.pushButton_30.setText(_translate("MainWindow", "GO"))
        self.groupBox_30.setTitle(_translate("MainWindow", "Armor Type"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "Mavi Çelik"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "Kyanit Zırhı"))
        self.comboBox_4.setItemText(3, _translate("MainWindow", "Zodyak Zırhı"))
        self.comboBox_4.setItemText(4, _translate("MainWindow", "Şeytan Boynuzu"))
        self.comboBox_4.setItemText(5, _translate("MainWindow", "Azrail Zırhı"))
        self.comboBox_4.setItemText(6, _translate("MainWindow", "Noel Kostümü"))
        self.comboBox_4.setItemText(7, _translate("MainWindow", "Kobra Kostümü"))
        self.comboBox_4.setItemText(8, _translate("MainWindow", "Jack Pumpkin Zırhı"))
        self.groupBox_29.setTitle(_translate("MainWindow", "Weapon Type"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "Triton Kilici"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "Zehir Kilici"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "Yari-İnsan"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "Ejderha Disi Kilici"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "Runik Kilici"))
        self.comboBox_3.setItemText(6, _translate("MainWindow", "Zodyak Kilici"))
        self.comboBox_3.setItemText(7, _translate("MainWindow", "Kyanit Kilici"))
        self.comboBox_3.setItemText(8, _translate("MainWindow", "Günes Palasi"))
        self.groupBox_19.setTitle(_translate("MainWindow", "Saved Cordinates"))
        self.label_16.setText(_translate("MainWindow", "X:"))
        self.label_17.setText(_translate("MainWindow", "Z:"))
        self.label_18.setText(_translate("MainWindow", "Y:"))
        self.lineEdit_23.setPlaceholderText(_translate("MainWindow", "Cordinate Name"))
        self.pushButton_31.setText(_translate("MainWindow", "SAVE"))
        self.pushButton_40.setText(_translate("MainWindow", "DELETE"))
        self.groupBox_35.setTitle(_translate("MainWindow", "Hair Type (Not Active)"))
        self.groupBox_36.setTitle(_translate("MainWindow", "Mount Type (Not Active)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Extra"))
        self.groupBox_20.setTitle(_translate("MainWindow", "GM"))
        self.checkBox_60.setText(_translate("MainWindow", "Disable Speed Hack"))
        self.checkBox_56.setText(_translate("MainWindow", "Disable Route"))
        self.checkBox_59.setText(_translate("MainWindow", "Stop Bot"))
        self.checkBox_57.setText(_translate("MainWindow", "Close Game"))
        self.checkBox_58.setText(_translate("MainWindow", "Voice Alert (beep)"))
        self.groupBox_31.setTitle(_translate("MainWindow", "Player"))
        self.checkBox_51.setText(_translate("MainWindow", "Stop Bot"))
        self.checkBox_52.setText(_translate("MainWindow", "Voice Alert (beep)"))
        self.checkBox_53.setText(_translate("MainWindow", "Close Game"))
        self.checkBox_54.setText(_translate("MainWindow", "Disable Speed Hack"))
        self.checkBox_55.setText(_translate("MainWindow", "Disable Route"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Anti-Ban"))
        self.groupBox_26.setTitle(_translate("MainWindow", "Slot"))
        self.checkBox_33.setText(_translate("MainWindow", "1.Slot"))
        self.checkBox_44.setText(_translate("MainWindow", "2.Slot"))
        self.checkBox_45.setText(_translate("MainWindow", "3.Slot"))
        self.checkBox_46.setText(_translate("MainWindow", "4.Slot"))
        self.lineEdit_3.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.lineEdit_4.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.lineEdit_5.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.lineEdit_6.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.groupBox_27.setTitle(_translate("MainWindow", "Slot [F]"))
        self.checkBox_47.setText(_translate("MainWindow", "F1"))
        self.checkBox_48.setText(_translate("MainWindow", "F2"))
        self.checkBox_49.setText(_translate("MainWindow", "F3"))
        self.checkBox_50.setText(_translate("MainWindow", "F4"))
        self.lineEdit_7.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.lineEdit_8.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.lineEdit_9.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.lineEdit_10.setPlaceholderText(_translate("MainWindow", "seconds"))
        self.groupBox_18.setTitle(_translate("MainWindow", "SpamBot"))
        self.label_21.setText(_translate("MainWindow", "Text"))
        self.label_27.setText(_translate("MainWindow", "Seconds"))
        self.pushButton_36.setText(_translate("MainWindow", "START SPAM"))
        self.pushButton_44.setText(_translate("MainWindow", "STOP SPAM"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Macro"))
        self.groupBox_32.setTitle(_translate("MainWindow", "Save Settings"))
        self.lineEdit_29.setPlaceholderText(_translate("MainWindow", "Setting Name"))
        self.pushButton_32.setText(_translate("MainWindow", "SAVE"))
        self.pushButton_41.setText(_translate("MainWindow", "DELETE"))
        self.comboBox_6.setItemText(0, _translate("MainWindow", ""))
        self.label_19.setText(_translate("MainWindow", "Current Setting:"))
        self.pushButton_33.setText(_translate("MainWindow", "Apply"))
        self.groupBox_33.setTitle(_translate("MainWindow", "Window Resize"))
        self.lineEdit_19.setPlaceholderText(_translate("MainWindow", "1920"))
        self.label_20.setText(_translate("MainWindow", "x"))
        self.lineEdit_26.setPlaceholderText(_translate("MainWindow", "1080"))
        self.pushButton_34.setText(_translate("MainWindow", "Apply"))
        self.groupBox_34.setTitle(_translate("MainWindow", "Timer"))
        self.checkBox_61.setText(_translate("MainWindow", "Close Game"))
        self.checkBox_62.setText(_translate("MainWindow", "Close Bot"))
        self.checkBox_63.setText(_translate("MainWindow", "Close PC"))
        self.lineEdit_27.setPlaceholderText(_translate("MainWindow", "minutes"))
        self.lineEdit_28.setPlaceholderText(_translate("MainWindow", "minutes"))
        self.lineEdit_30.setPlaceholderText(_translate("MainWindow", "minutes"))
        self.groupBox_40.setTitle(_translate("MainWindow", "UPDATE"))
        self.pushButton_42.setText(_translate("MainWindow", "BOT UPDATE"))
        self.groupBox_44.setTitle(_translate("MainWindow", "Language"))
        self.comboBox_9.setItemText(0, _translate("MainWindow", "English"))
        self.comboBox_9.setItemText(1, _translate("MainWindow", "Türkçe"))
        self.pushButton_43.setText(_translate("MainWindow", "Apply"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("MainWindow", "Settings"))
        self.pushButton_20.setText(_translate("MainWindow", "__"))
        self.pushButton_21.setText(_translate("MainWindow", "X"))
        self.label_4.setText(_translate("MainWindow", "Level:"))
        self.label.setText(_translate("MainWindow", "Nick: "))
        self.label_29.setText(_translate("MainWindow", "Time:"))
        self.label_30.setText(_translate("MainWindow", "00:00:00"))
        self.label_3.setText(_translate("MainWindow", "Dev: TheImpact"))
        self.checkBox_43.setText(_translate("MainWindow", "Top Most"))
        self.label_6.setText(_translate("MainWindow", "Expire: Connecting..."))
        self.settings = {}
        self.load_settings()
        self.load_routes()


    def PointerAddress(self,BASE,OFFSETS):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))
        RP = RemotePointer(PM.process_handle, BASE)
        for OFFSET in OFFSETS:
            if OFFSET != OFFSETS[-1]:
                RP = RemotePointer(PM.process_handle, RP.value + OFFSET)
            else:
                return RP.value + OFFSET
            
         
    def aa(self): 
        Thread(target=self.otoatak).start()  

    def ototop(self): 
        Thread(target=self.ototoplama).start() 

    def start_otopot1(self):
        Thread(target=self.otopot1).start()

    def start_otopot2(self):
        Thread(target=self.otopot2).start()
    
    def slt1(self):
        Thread(target=self.slot1).start()
    
    def slt2(self):
        Thread(target=self.slot2).start() 

    def slt3(self):
        Thread(target=self.slot3).start()

    def slt4(self):
        Thread(target=self.slot4).start()
    
    def fslt1(self):
        Thread(target=self.fslot1).start()

    def fslt2(self):
        Thread(target=self.fslot2).start()

    def fslt3(self):
        Thread(target=self.fslot3).start()

    def fslt4(self):
        Thread(target=self.fslot4).start()
                                          
    def sc(self): 
        Thread(target=self.scale).start()               
    def hh(self): 
        Thread(target=self.hareket).start()   
    def sh(self): 
        Thread(target=self.saldiri).start()
    def kb(self): 
        Thread(target=self.karakter).start()  
    def ss(self): 
        Thread(target=self.skillspeed).start()
    def ts(self): 
        Thread(target=self.turnspeed).start()
    def cs(self): 
        Thread(target=self.cameraspeed).start()
    def bb(self): 
        Thread(target=self.buggsbunny).start()
    def sk(self): 
        Thread(target=self.skills).start()
    def anm(self): 
        Thread(target=self.animasyon).start()

    def wt(self): 
        Thread(target=self.wtype).start() 
    
    def at(self): 
        Thread(target=self.atype).start() 

    def Start(self):
        Thread(target=self.ClientStart).start()
        Thread(target=self.update_values).start() 
        
    def Stop(self):
        Thread(target=self.ClientStop).start()

    def resze(self): 
        Thread(target=self.rsize).start() 

    def onal(self): 
        Thread(target=self.oneal).start() 

    def okapat(self): 
        Thread(target=self.oyunukapat).start() 

    def okapat2(self): 
        Thread(target=self.oyunukapat2).start() 

    def bkapat(self): 
        Thread(target=self.botukapat).start()  

    def pckpt(self): 
        Thread(target=self.pckapat).start() 
   
    def tp(self): 
        Thread(target=self.teleport).start()

    def rr(self): 
        Thread(target=self.start_selected_route).start()

    def pm(self): 
        Thread(target=self.pm_bildirim).start()   

    def capa(self): 
         Thread(target=self.captha).start() 

    def rev(self): 
        Thread(target=self.revive).start()   
    
    def rev2(self): 
        Thread(target=self.revive).start()   

    def sp(self): 
        self.stop_spam = False
        Thread(target=self.spam).start()  

    def plyr(self): 
        Thread(target=self.player).start()  

    def gm(self): 
        Thread(target=self.gamemaster).start()  

    def stop_spam_function(self):
        self.stop_spam = True
     
    

    def hareket(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))     
        if self.checkBox_4.isChecked():
                while True:
                        sleep(0.1)
                        self.lineEdit_14.setText(str(float(self.horizontalSlider_4.value())))     
                        if self.lineEdit_14.text() == str(1.0):
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 170.0)
                        if self.lineEdit_14.text() == str(2.0):  
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 230.0)  
                        if self.lineEdit_14.text() == str(3.0):
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 330.0)
                        if self.lineEdit_14.text() == str(4.0):  
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 430.0)      
                        if self.lineEdit_14.text() == str(5.0):
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 530.0)
                        if self.lineEdit_14.text() == str(6.0):  
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 650.0)  
                        if self.lineEdit_14.text() == str(7.0):
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 680.0)
                        if self.lineEdit_14.text() == str(8.0):  
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 700.0)   
                        if self.lineEdit_14.text() == str(9.0):
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 730.0)
                        if self.lineEdit_14.text() == str(10.0):  
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 750.0) 
                        if not self.checkBox_4.isChecked():
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 200.0) 

    def saldiri(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))            
        if self.checkBox_8.isChecked():
                while True:
                        sleep(0.1)
                        self.lineEdit_15.setText(str(float(self.horizontalSlider_8.value())))     
                        if self.lineEdit.text() == str(1.0):
                                pass
                        if self.lineEdit_15.text() == str(2.0):  
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 80)  
                        if self.lineEdit_15.text() == str(3.0):
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 120)
                        if self.lineEdit_15.text() == str(4.0):  
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 160)      
                        if self.lineEdit_15.text() == str(5.0):
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 180)
                        if self.lineEdit_15.text() == str(6.0):  
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 190)  
                        if self.lineEdit_15.text() == str(7.0):
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 220)
                        if self.lineEdit_15.text() == str(8.0):  
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 250)   
                        if self.lineEdit_15.text() == str(9.0):
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 270)
                        if self.lineEdit_15.text() == str(10.0):  
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 280)   
                        if not self.checkBox_8.isChecked():
                                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7C0]), 200)   
    def animasyon(self):
                PM = pymem.Pymem()
                PM.open_process_from_id(int(self.lineEdit.text()))            
                if self.checkBox_9.isChecked():
                        while True:
                                sleep(0.1)
                                self.label_24.setText(str(float(self.horizontalSlider_6.value())))     
                                if self.label_24.text() == str(1.0):
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 1.0)
                                if self.label_24.text() == str(2.0):  
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 2.0)  
                                if self.label_24.text() == str(3.0):
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 3.0)
                                if self.label_24.text() == str(4.0):  
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 4.0)      
                                if self.label_24.text() == str(5.0):
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 5.0)
                                if self.label_24.text() == str(6.0):  
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 6.0)  
                                if self.label_24.text() == str(7.0):
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 7.0)  
                                if not self.checkBox_9.isChecked():
                                        PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0xA0]), 1.0) 

    def karakter(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))     
        if self.checkBox_10.isChecked():
                while True:
                        sleep(0.1)
                        self.lineEdit_24.setText(str(float(self.horizontalSlider_11.value())))     
                        if self.lineEdit_24.text() == str(1.0):
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x13C]), 1.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x140]), 1.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x144]), 1.0)
                        if self.lineEdit_24.text() == str(2.0):  
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x13C]), 2.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x140]), 2.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x144]), 2.0)
                        if self.lineEdit_24.text() == str(3.0):
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x13C]), 3.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x140]), 3.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x144]), 3.0)
                        if self.lineEdit_24.text() == str(4.0):  
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x13C]), 4.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x140]), 4.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x144]), 4.0)     
                        if not self.checkBox_10.isChecked():
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x13C]), 1.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x140]), 1.0)
                                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x144]), 1.0)

    def skillspeed(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))  
        while True:                 
                    sleep(0.1)     
                    if self.checkBox_31.isChecked():
                                    sleep(0.1)
                                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x268, 0x288, 0x8C2]), 16670)
                    else:
                            PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x268, 0x288, 0x8C2]), 16356)
    
    def cameraspeed(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))  
        while True:
            sleep(0.1)
            if self.checkBox_66.isChecked():
                    time.sleep(0.1)
                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x740]), 70)
            else:
                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x740]), 50)

    def turnspeed(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))  
        while True:
            sleep(0.1)
            if self.checkBox_67.isChecked():
                    time.sleep(0.1)
                    PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x744]), 60.0)
            else:
                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x744]), 30.0)

    def buggsbunny(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))  
        while True:
            sleep(0.1)
            if self.checkBox_73.isChecked():
                try:
                    time.sleep(0.1)
                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x330]), 500)
                except Exception as e:
                    print(f"Error: {e}")
                    continue
            else:
                pass
        
    def pm_bildirim(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))  
        
        while True:
                time.sleep(0.1)
                if self.checkBox_68.isChecked():
                 try:
                        value = PM.read_int(self.PointerAddress(PM.base_address + 0x043BACE0, OFFSETS=[0x248, 0x6A0, 0x1F7C]))
                        if value == 1:
                                winsound.Beep(600, 500)  # Frequency=1000Hz, Duration=500ms
                 except Exception as e:
                        print(f"Error: {e}")
                        continue

    def captha(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        solver = Clicker() 
        while True:
                time.sleep(0.1)
                if self.checkBox_71.isChecked():
                        captha_value = PM.read_int(self.PointerAddress(PM.base_address + 0x043958A8, OFFSETS=[0x50, 0x628]))
                        if captha_value == 1:
                                time.sleep(3)
                                solver.click_on_image()
                                pass

    def revive(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        revive = Clicker()  
        while True:
                time.sleep(0.1)
                if self.checkBox_72.isChecked() or self.checkBox_78.isChecked():
                        rev_value = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x770]))
                        if rev_value == 1:
                                time.sleep(15)
                                revive.click_on_image()
                                pass

    def update_player_value(self, player_value):
        self.listWidget_2.addItem(str(player_value))

    def player(self):    # PLAYER TESPİT EDİLİRSE
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        speed_locked = False  # Hız sabitlendi mi?
        
        while True:
            if self.checkBox_12.isChecked():
                time.sleep(0.1)
                player_value = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0A0, OFFSETS=[0x2A8, 0x1D0]))
                self.update_player_value(player_value)
                time.sleep(0.8)
                
            if player_value == 1:
                if self.checkBox_51.isChecked(): 
                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8,0x5C8]), 0) 
                    self.BotRun = False
                    print("BotRun durduruldu.")
                
                if self.checkBox_52.isChecked():
                    winsound.Beep(500, 1000)
                
                if self.checkBox_53.isChecked():
                    self.oyunukapat2()

                if self.checkBox_54.isChecked() and not speed_locked:
                    PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 320.0)
                    speed_locked = True  # Hız sabitlendi
                    print("Hareket hızı 200.0 olarak sabitlendi.")
                
                if self.checkBox_55.isChecked():
                    self.is_route_running = False
                    self.starting_thread.join()
                    print("Route stopped.")

    def update_gamemaster_value(self, gamemaster_value):
        self.listWidget_3.addItem(str(gamemaster_value))

    def gamemaster(self):    # GM TESPİT EDİLİRSE
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        speed_locked = False  # Hız sabitlendi mi?
        
        while True:
            if self.checkBox_12.isChecked():
                time.sleep(0.1)
                gamemaster_value = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0A0, OFFSETS=[0x2A8, 0x1D0]))
                self.update_gamemaster_value(gamemaster_value)
                time.sleep(0.8)
                
            if gamemaster_value == 1:
                if self.checkBox_51.isChecked(): 
                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8,0x5C8]), 0) 
                    self.BotRun = False
                    print("BotRun durduruldu.")
                
                if self.checkBox_52.isChecked():
                    winsound.Beep(500, 1000)
                
                if self.checkBox_53.isChecked():
                    self.oyunukapat2()

                if self.checkBox_54.isChecked() and not speed_locked:
                    PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x75C]), 320.0)
                    speed_locked = True  # Hız sabitlendi
                    print("Hareket hızı 200.0 olarak sabitlendi.")
                
                if self.checkBox_55.isChecked():
                    self.is_route_running = False
                    self.starting_thread.join()
                    print("Route stopped.")

    def spam(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        while not self.stop_spam:
                time.sleep(0.1)
                text_to_write = self.lineEdit_31.text()
                delay_seconds = int(self.lineEdit_32.text())
                time.sleep(1)
                pyautogui.getWindowsWithTitle("Mobile2 Global")[0].activate()  # Focus the window
                time.sleep(1)
                pyautogui.press('enter')
                time.sleep(delay_seconds)
                pyautogui.write(text_to_write)
                time.sleep(1)
                pyautogui.press('enter')
                time.sleep(0.5)


    def skills(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))      
        while True:  
                sleep(0.1)    
                if self.checkBox_77.isChecked():
                        sleep(10)
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x312]), 1) #skill aktive
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x314]), 1) #üç-yönlü
                        sleep(2)
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x312]), 1) #skill aktive
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x314]), 5) #hamle
                        sleep(2)
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x312]), 1) #skill aktive
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x314]), 2) #kılıç çevirme
                else:
                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x312]), 0)
                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x312]), 0)
                    PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x678, 0x312]), 0)
   
   
    def ClientStart(self):
        self.BotRun = True
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))
        # slot değerini ilk kez okuyoruz
        slot = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5D4]))

        while self.BotRun:
                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5D4]), slot)
                currentmod = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5C8])) # 1 - 0 kontrol 
                time.sleep(0.3)
                if currentmod == 0:  # Canavar öldü
                    # Yeni MobVID alınması
                    MobVid = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x518, 0x10]))
                    time.sleep(0.1)
                    if slot != 0:
                        # Yeni MobVID yazdırılıyor
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5D0]), MobVid)
                        time.sleep(0.3)
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8,0x5C8]), 1)
                    else:
                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5C8]), 0)
                time.sleep(0.1)  

    def ClientStop(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))
        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8,0x5C8]), 0) 
        self.BotRun=False


    def teleport(self):  
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        tpX = float(self.lineEdit_16.text())
        tpY = float(self.lineEdit_18.text())
        tpZ = float(self.lineEdit_17.text())
        address_x = int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x1E4]))
        address_y = int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x1E8]))
        address_z = int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x288, 0x1E0]))
        PM.write_float(address_x, tpX)
        PM.write_float(address_y, tpY)
        PM.write_float(address_z, tpZ)


    def wtype(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        while True:   
                sleep(0.1)       
                if self.checkBox_32.isChecked():
                                if self.comboBox_3.currentText() == 'Triton Kilici':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 279)
                                if self.comboBox_3.currentText() == 'Zehir Kilici':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 189)
                                if self.comboBox_3.currentText() == 'Yari-İnsan':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 3159)
                                if self.comboBox_3.currentText() == 'Ejderha Disi Kilici':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 479)
                                if self.comboBox_3.currentText() == 'Runik Kilici':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 469)   
                                if self.comboBox_3.currentText() == 'Zodyak Kilici':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 309)            
                                if self.comboBox_3.currentText() == 'Kyanit Kilici':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 509)                 
                                if self.comboBox_3.currentText() == 'Günes Palasi':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x8]), 3199) 
                else:   
                       PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 0)    
 


    def atype(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text())) 
        while True:   
                sleep(0.1)       
                if self.checkBox_34.isChecked():
                                if self.comboBox_4.currentText() == 'Mavi Çelik':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 12019)
                                if self.comboBox_4.currentText() == 'Kyanit Zırhı':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 12059)
                                if self.comboBox_4.currentText() == 'Zodyak Zırhı':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 19299)
                                if self.comboBox_4.currentText() == 'Şeytan Boynuzu':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 20009)
                                if self.comboBox_4.currentText() == 'Azrail Zırhı':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 41315)   
                                if self.comboBox_4.currentText() == 'Noel Kostümü':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 41145)            
                                if self.comboBox_4.currentText() == 'Kobra Kostümü':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 41308)                 
                                if self.comboBox_4.currentText() == 'Jack Pumpkin Zırhı':
                                        PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 41320)
                else:   
                       PM.write_int(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x818, 0x98]), 0)  


    def update_values(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))  
        try:                   
                level = PM.read_long(self.PointerAddress(PM.base_address + 0x0419C090, OFFSETS=[0x3D8, 0x7D0]))
                self.label_4.setText("Level: " + str(level))

        except Exception as e:
            print("Değerler güncellenirken hata oluştu:", str(e))

    def ototoplama(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))  
        while True:  
                time.sleep(1)
                if self.checkBox_76.isChecked():
                 try:
                                pydirectinput.keyDown('"')
                                pydirectinput.keyDown('z')
                                time.sleep(0.05)  # İhtiyaç duyulan süre kadar bekleyin (ayarlayabilirsiniz)
                                pydirectinput.keyUp('"')
                                pydirectinput.keyUp('z')
                 except:
                        break     
                else:
                 break   

    def otopot1(self):  
        while True:  
                time.sleep(1)    
                if self.checkBox_74.isChecked():
                        pydirectinput.press('F3')
                else:
                        pass
    
    def otopot2(self):  
        while True:  
                time.sleep(1)    
                if self.checkBox_75.isChecked():
                        pydirectinput.press('F4')
                else:
                        pass
    def slot1(self):  
        while True:  
            sleep(0.1)    
            if self.checkBox_33.isChecked():
                s1 = int(self.lineEdit_3.text())
                sleep(s1)
                pydirectinput.press('1')
            else:
                break

    def slot2(self):  
        while True:  
            sleep(0.1)    
            if self.checkBox_44.isChecked():
                s2 = int(self.lineEdit_4.text())
                sleep(s2)
                pydirectinput.press('2')
            else:
                break

    def slot3(self):  
        while True:  
            sleep(0.1)    
            if self.checkBox_45.isChecked():
                s3 = int(self.lineEdit_5.text())
                sleep(s3)
                pydirectinput.press('3')
            else:
                break

    def slot4(self):  
        while True:  
            sleep(0.1)    
            if self.checkBox_46.isChecked():
                s4 = int(self.lineEdit_6.text())
                sleep(s4)
                pydirectinput.press('4')
            else:
                break

    def fslot1(self):  
        while True:  
            sleep(0.1)    
            if self.checkBox_47.isChecked():
                s1 = int(self.lineEdit_8.text())
                sleep(s1)
                pydirectinput.press('F1')
            else:
                break

    def fslot2(self):
        while True:  
            sleep(0.1)    
            if self.checkBox_48.isChecked():
                s2 = int(self.lineEdit_10.text())
                sleep(s2)
                pydirectinput.press('F2')
            else:
                break

    def fslot3(self):
        while True:  
            sleep(0.1)    
            if self.checkBox_49.isChecked():
                s3 = int(self.lineEdit_9.text())
                sleep(s3)
                pydirectinput.press('F3')
            else:
                break

    def fslot4(self):
        while True:  
            sleep(0.1)    
            if self.checkBox_50.isChecked():
                s4 = int(self.lineEdit_7.text())
                sleep(s4)
                pydirectinput.press('F4')
            else:
                break
                        

    def auto_screen_scale(self):
        # Pencere boyutlandırma kodunuz
        hedef_pencere_boyutu = (1130, 630)
        hedef_pencere_basligi = "Mobile2 Global"

        hedef_pencere = gw.getWindowsWithTitle(hedef_pencere_basligi)
        if len(hedef_pencere) == 0:
            print(f"{hedef_pencere_basligi} başlıklı pencere bulunamadı.")
        else:
            hedef_pencere = hedef_pencere[0]
            hedef_pencere.activate()
            hedef_pencere.resizeTo(hedef_pencere_boyutu[0], hedef_pencere_boyutu[1])


    def oneal(self, state):
        pid = int(self.lineEdit.text())

        def get_hwnds_for_pid(pid):
            def callback(hwnd, hwnds):
                if win32gui.IsWindowVisible(hwnd) and win32gui.IsWindowEnabled(hwnd):
                    _, found_pid = win32process.GetWindowThreadProcessId(hwnd)
                    if found_pid == pid:
                        hwnds.append(hwnd)
                return True

            hwnds = []
            win32gui.EnumWindows(callback, hwnds)
            return hwnds

        hwnds = get_hwnds_for_pid(pid)
        if hwnds:
            self.Console_hwnd = hwnds[0]

            if state == QtCore.Qt.Checked:
                # Checkbox işaretliyken pencereyi üstte sabitle
                win32gui.SetWindowPos(
                    self.Console_hwnd,
                    win32con.HWND_TOPMOST,  # Pencereyi üstte tut
                    0, 0, 0, 0,
                    win32con.SWP_NOMOVE | win32con.SWP_NOSIZE
                )
            else:
                # Checkbox kaldırıldığında pencereyi üstte kalıcıdan çıkar
                win32gui.SetWindowPos(
                    self.Console_hwnd,
                    win32con.HWND_NOTOPMOST,  # Pencereyi üstte kalıcı yapma
                    0, 0, 0, 0,
                    win32con.SWP_NOMOVE | win32con.SWP_NOSIZE
                )
        else:
            print(f"PID {pid} için pencere bulunamadı.")
        

    def oyunukapat(self):  
        pid = int(self.lineEdit.text())    
        def get_hwnds_for_pid(pid):
            def callback(hwnd, hwnds):
                    if win32gui.IsWindowVisible(hwnd) and win32gui.IsWindowEnabled(hwnd):
                        _, found_pid = win32process.GetWindowThreadProcessId(hwnd)
                    # print hwnd
                        if found_pid == pid:
                                hwnds.append(hwnd)
                    return True
            hwnds = []
            win32gui.EnumWindows(callback, hwnds)
            return hwnds  
        self.Console_hwnd = get_hwnds_for_pid(pid)[0]   
        asd = int(self.lineEdit_27.text())
        if self.checkBox_61.isChecked():
                import win32con
                time.sleep(asd * 60)
                win32gui.PostMessage(self.Console_hwnd, win32con.WM_CLOSE, 0, 0)
                self.checkBox_61.setChecked(False)

    def oyunukapat2(self): 
         
        pid = int(self.lineEdit.text())    
        def get_hwnds_for_pid(pid):
            def callback(hwnd, hwnds):
                    if win32gui.IsWindowVisible(hwnd) and win32gui.IsWindowEnabled(hwnd):
                        _, found_pid = win32process.GetWindowThreadProcessId(hwnd)
                    # print hwnd
                        if found_pid == pid:
                                hwnds.append(hwnd)
                    return True
            hwnds = []
            win32gui.EnumWindows(callback, hwnds)
            return hwnds  
        self.Console_hwnd = get_hwnds_for_pid(pid)[0]         
        win32gui.PostMessage(self.Console_hwnd, win32con.WM_CLOSE, 0, 0)

    def botukapat(self):
                # Bekleme süresini kullanıcıdan dakika cinsinden al ve saniyeye çevir
                delay_minutes = int(self.lineEdit_28.text())
                wait_time = delay_minutes * 60
                
                # Checkbox işaretli mi kontrol et
                if self.checkBox_62.isChecked():

                        # Belirtilen süre kadar bekle
                        time.sleep(wait_time)
                        
                        # Tüm açık pencereleri tara ve başlığı "msedge" olanı bul
                        def enum_windows_callback(hwnd, windows):
                                if "msedge" in win32gui.GetWindowText(hwnd):
                                        windows.append(hwnd)
                                return True
                        
                        windows = []
                        win32gui.EnumWindows(enum_windows_callback, windows)

                        # Pencere bulunduysa kapat
                        if windows:
                                for hwnd in windows:
                                        win32gui.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0)
                                        self.checkBox_62.setChecked(False)
                                        print("msedge penceresi kapatıldı.")
                        else:
                                        print("Başlığı 'msedge' olan bir pencere bulunamadı.")


 
    def rsize(self):  
        pid = int(self.lineEdit.text())    
        def get_hwnds_for_pid(pid):
                
            def callback(hwnd, hwnds):
                    if win32gui.IsWindowVisible(hwnd) and win32gui.IsWindowEnabled(hwnd):
                        _, found_pid = win32process.GetWindowThreadProcessId(hwnd)
                    # print hwnd
                        if found_pid == pid:
                                hwnds.append(hwnd)
                    return True
            hwnds = []
            win32gui.EnumWindows(callback, hwnds)
            return hwnds  
        self.Console_hwnd = get_hwnds_for_pid(pid)[0]   
        print("as",self.Console_hwnd)
        win32gui.MoveWindow(self.Console_hwnd, 0, 0, int(self.lineEdit_19.text()), int(self.lineEdit_26.text()), True) 

    def pckapat(self):
        delay_minutes = int(self.lineEdit_30.text())
        wait_time = delay_minutes * 60

        if self.checkBox_63.isChecked():
                time.sleep(wait_time)
                os.system("shutdown /s /t 1")  # /s bilgisayarı kapatır, /t 1 hemen kapatır
                self.checkBox_63.setChecked(False)


    def save_coordinates(self):
        # JSON dosyasına kaydedilecek koordinatları al
        tpX = self.lineEdit_21.text()
        tpY = self.lineEdit_20.text()
        tpZ = self.lineEdit_22.text()
        coordinate_name = self.lineEdit_23.text()

        if not tpX or not tpY or not tpZ or not coordinate_name:
            print("Lütfen tüm alanları doldurun.")
            return

        # JSON dosyasını yükle veya oluştur
        try:
            with open(self.coordinates_file, "r") as file:
                data = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            data = {}

        # Yeni koordinat setini ekle
        data[coordinate_name] = {"tpX": tpX, "tpY": tpY, "tpZ": tpZ}

        # JSON dosyasını güncelle
        with open(self.coordinates_file, "w") as file:
            json.dump(data, file, indent=4)

        # ComboBox'a yeni koordinat adını ekle
        if coordinate_name not in [self.comboBox_5.itemText(i) for i in range(self.comboBox_5.count())]:
            self.comboBox_5.addItem(coordinate_name)

        print(f"{coordinate_name} koordinatları kaydedildi.")

    def load_coordinate_names(self):
        # JSON dosyasından koordinat adlarını yükle ve ComboBox'a ekle
        try:
            with open(self.coordinates_file, "r") as file:
                data = json.load(file)
                for name in data.keys():
                    self.comboBox_5.addItem(name)
        except (FileNotFoundError, json.JSONDecodeError):
            print("Kayıtlı koordinat bulunamadı.")

    def load_coordinates(self):
        # ComboBox'ta seçilen koordinat adını JSON dosyasından yükle
        coordinate_name = self.comboBox_5.currentText()
        if not coordinate_name:
            return

        try:
            with open(self.coordinates_file, "r") as file:
                data = json.load(file)
                if coordinate_name in data:
                    tpX = data[coordinate_name]["tpX"]
                    tpY = data[coordinate_name]["tpY"]
                    tpZ = data[coordinate_name]["tpZ"]
                    
                    # LineEdit'lere değerleri yükle
                    self.lineEdit_16.setText(tpX)
                    self.lineEdit_18.setText(tpY)
                    self.lineEdit_17.setText(tpZ)

        except (FileNotFoundError, json.JSONDecodeError):
            print("Koordinat dosyası yüklenemedi.")

    def delete_coordinate(self):
        # Get the selected coordinate name from the ComboBox
        coordinate_name = self.comboBox_5.currentText()
        if not coordinate_name:
                print("Silinecek bir koordinat seçin.")
                return

        # Load the JSON file and remove the selected coordinate
        try:
                with open(self.coordinates_file, "r") as file:
                        data = json.load(file)
                
                if coordinate_name in data:
                # Remove the coordinate from the data
                        del data[coordinate_name]

                # Save the updated data back to the JSON file
                with open(self.coordinates_file, "w") as file:
                        json.dump(data, file, indent=4)

                # Remove the coordinate name from the ComboBox
                index = self.comboBox_5.findText(coordinate_name)
                if index >= 0:
                        self.comboBox_5.removeItem(index)

                        print(f"{coordinate_name} koordinatları silindi.")
                else:
                        print("Seçilen koordinat bulunamadı.")
        
        except (FileNotFoundError, json.JSONDecodeError):
                print("Koordinat dosyası yüklenemedi veya bulunamadı.")



    def save_setting(self):
        setting_name = self.lineEdit_29.text()
        if setting_name:
            self.settings[setting_name] = {
                "checkbox1": self.checkBox_31.isChecked(),
                "checkbox2": self.checkBox_66.isChecked(),
                "checkbox3": self.checkBox_67.isChecked(),
                "checkbox4": self.checkBox_73.isChecked(),
                "checkbox5": self.checkBox_4.isChecked(),
                "checkbox6": self.checkBox_8.isChecked(),
                "checkbox7": self.checkBox_10.isChecked(),
                "checkbox8": self.checkBox_74.isChecked(),
                "checkbox9": self.checkBox_75.isChecked(),
                "checkbox10": self.checkBox_76.isChecked(),
                "checkbox11": self.checkBox_77.isChecked(),
                "checkbox12": self.checkBox_9.isChecked(),
                "checkbox13": self.checkBox_68.isChecked(),
                "checkbox14": self.checkBox_69.isChecked(),
                "checkbox15": self.checkBox_70.isChecked(),
                "checkbox16": self.checkBox_71.isChecked(),
                "checkbox17": self.checkBox_72.isChecked(),
                "checkbox18": self.checkBox_11.isChecked(),
                "checkbox19": self.checkBox_51.isChecked(),
                "checkbox20": self.checkBox_52.isChecked(),
                "checkbox21": self.checkBox_53.isChecked(),
                "checkbox22": self.checkBox_54.isChecked(),
                "checkbox23": self.checkBox_55.isChecked(),
                "checkbox24": self.checkBox_56.isChecked(),
                "checkbox25": self.checkBox_57.isChecked(),
                "checkbox26": self.checkBox_58.isChecked(),
                "checkbox27": self.checkBox_59.isChecked(),
                "checkbox28": self.checkBox_60.isChecked(),
                "checkbox29": self.checkBox_78.isChecked(),
                "slider1": self.horizontalSlider_4.value(),
                "slider2": self.horizontalSlider_8.value(),
                "slider3": self.horizontalSlider_11.value(),
                "slider4": self.horizontalSlider_6.value(),
                "slider5": self.horizontalSlider_7.value(),
                "radio1": self.radioButton_3.isChecked(),
                "radio2": self.radioButton_4.isChecked(),
                "radio3": self.radioButton_2.isChecked(),
                "lineEdit1": self.lineEdit_11.text(),
                "lineEdit2": self.lineEdit_13.text(),
            }
            self.save_settings_to_file()
            self.comboBox_6.addItem(setting_name)
            print(f"{setting_name} ayarları kaydedildi.")
            self.lineEdit_29.clear()
        else:
            print("Lütfen bir ayar ismi girin.")

    def apply_setting(self):
        selected_setting = self.comboBox_6.currentText()
        if selected_setting in self.settings:
            setting_data = self.settings[selected_setting]
            self.checkBox_31.setChecked(setting_data["checkbox1"])
            self.checkBox_66.setChecked(setting_data["checkbox2"])
            self.checkBox_67.setChecked(setting_data["checkbox3"])
            self.checkBox_73.setChecked(setting_data["checkbox4"])
            self.checkBox_4.setChecked(setting_data["checkbox5"])
            self.checkBox_8.setChecked(setting_data["checkbox6"])
            self.checkBox_10.setChecked(setting_data["checkbox7"])
            self.checkBox_74.setChecked(setting_data["checkbox8"])
            self.checkBox_75.setChecked(setting_data["checkbox9"])
            self.checkBox_76.setChecked(setting_data["checkbox10"])
            self.checkBox_77.setChecked(setting_data["checkbox11"])
            self.checkBox_9.setChecked(setting_data["checkbox12"])
            self.checkBox_68.setChecked(setting_data["checkbox13"])
            self.checkBox_69.setChecked(setting_data["checkbox14"])
            self.checkBox_70.setChecked(setting_data["checkbox15"])
            self.checkBox_71.setChecked(setting_data["checkbox16"])
            self.checkBox_72.setChecked(setting_data["checkbox17"])
            self.checkBox_11.setChecked(setting_data["checkbox18"])
            self.checkBox_51.setChecked(setting_data["checkbox19"])
            self.checkBox_52.setChecked(setting_data["checkbox20"])
            self.checkBox_53.setChecked(setting_data["checkbox21"])
            self.checkBox_54.setChecked(setting_data["checkbox22"])
            self.checkBox_55.setChecked(setting_data["checkbox23"])
            self.checkBox_56.setChecked(setting_data["checkbox24"])
            self.checkBox_57.setChecked(setting_data["checkbox25"])
            self.checkBox_58.setChecked(setting_data["checkbox26"])
            self.checkBox_59.setChecked(setting_data["checkbox27"])
            self.checkBox_60.setChecked(setting_data["checkbox28"])
            self.checkBox_78.setChecked(setting_data["checkbox29"])
            self.horizontalSlider_4.setValue(setting_data["slider1"])
            self.horizontalSlider_8.setValue(setting_data["slider2"])
            self.horizontalSlider_11.setValue(setting_data["slider3"])
            self.horizontalSlider_6.setValue(setting_data["slider4"])
            self.horizontalSlider_7.setValue(setting_data["slider5"])
            self.radioButton_3.setChecked(setting_data["radio1"])
            self.radioButton_4.setChecked(setting_data["radio2"])
            self.radioButton_2.setChecked(setting_data["radio3"])
            self.lineEdit_11.setText(setting_data["lineEdit1"])
            self.lineEdit_13.setText(setting_data["lineEdit2"])
            print(f"{selected_setting} ayarı uygulandı.")
        else:
            print("Seçili ayar bulunamadı.")

    def delete_setting(self):
        selected_setting = self.comboBox_6.currentText()
        if selected_setting in self.settings:
            del self.settings[selected_setting]
            index = self.comboBox_6.findText(selected_setting)
            if index >= 0:
                self.comboBox_6.removeItem(index)
            self.save_settings_to_file()
        else:
            print("Silinecek ayar bulunamadı.")

    def save_settings_to_file(self):
        with open("settings.json", "w") as f:
            json.dump(self.settings, f, indent=4)

    def load_settings(self):
        if os.path.exists("settings.json"):
            with open("settings.json", "r") as f:
                self.settings = json.load(f)
            self.comboBox_6.clear()
            self.comboBox_6.addItems(self.settings.keys())
        else:
            print("Ayar dosyası bulunamadı, yeni bir dosya oluşturulacak.")

    # ROUTE WRITE
    def route(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))
        click = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x59C]))
        is_clicking = False  
        while self.is_recording:  
                click = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x59C]))

                if click == 1 and not is_clicking:  
                        is_clicking = True  
                        x = PM.read_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5B0]))
                        y = PM.read_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5B4]))
                        z = PM.read_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5B8]))
                        print(f"Captured coordinates: X={x}, Y={y}, Z={z}") 
                        self.records.append({"X": x, "Y": y, "Z": z}) 

                elif click == 0: 
                        is_clicking = False
                        time.sleep(0.01)

    def route_write(self):
        PM = pymem.Pymem()
        PM.open_process_from_id(int(self.lineEdit.text()))

        current_index = 0
        while self.is_route_running and current_index < len(self.records):
                coords = self.records[current_index]
                x, y, z = coords['X'], coords['Y'], coords['Z']
                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5B0]), x)
                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5B4]), y)
                PM.write_float(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x5B8]), z)
                PM.write_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x59C]), 1)

                # Burada click'in sıfır olup olmadığını kontrol ederken sleep ekleyebilirsiniz
                click = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x59C]))
                while click != 0:
                 click = PM.read_int(self.PointerAddress(PM.base_address + 0x0419C0B0, OFFSETS=[0x2A8, 0x59C]))
                time.sleep(0.001)  # Biraz bekleyerek CPU'yu rahatlat

                current_index += 1
                if current_index >= len(self.records):
                 current_index = 0


    def start_recording(self):
        if not self.is_recording:
                self.is_recording = True
                self.recording_thread = Thread(target=self.route)
                self.recording_thread.start()
                print("Recording started.") 

    def stop_recording(self):
        if self.is_recording:
                self.is_recording = False
                self.recording_thread.join() 
                print("Recording stopped.") 


    def save_route(self):
        file_name = self.lineEdit_12.text()
        if file_name:
                route_directory = os.path.join(os.getcwd(), 'routes')
                if not os.path.exists(route_directory):
                        os.makedirs(route_directory)
                json_file_path = os.path.join(route_directory, f"{file_name}.json")
                print(f"Saving coordinates: {self.records}") 
                with open(json_file_path, "w") as json_file:
                        json.dump(self.records, json_file, indent=4)
                self.comboBox_2.addItem(f"{file_name}.json")
                QMessageBox.information(None, "Kayıt", f"{file_name}.json dosyası kaydedildi.")
        else:
                QMessageBox.warning(None, "Uyarı", "Lütfen geçerli bir dosya adı girin.")

    def load_routes(self):
        route_directory = os.path.join(os.getcwd(), 'routes')
        if not os.path.exists(route_directory):
                os.makedirs(route_directory)

        self.comboBox_2.clear() 
        for file in os.listdir(route_directory):
                if file.endswith(".json"):
                 self.comboBox_2.addItem(file) 

    def delete_route(self):
        selected_route = self.comboBox_2.currentText()
        if not selected_route:
                print("No route selected for deletion")
                return

        route_directory = os.path.join(os.getcwd(), 'routes')
        json_file_path = os.path.join(route_directory, selected_route)

        if not os.path.exists(json_file_path):
                print(f"File {json_file_path} not found.")
                return
        try:
                os.remove(json_file_path) 
                print(f"Route {selected_route} deleted")
                self.load_routes()
        except Exception as e:
                print(f"Error deleting route: {e}")


    def start_selected_route(self):
        selected_route = self.comboBox_2.currentText()
        if not selected_route:
                print("No route selected")
                return

        # 'routes' klasöründe dosya yolunu ayarlıyoruz
        json_file_path = os.path.join(os.getcwd(), 'routes', selected_route)
        print(f"Trying to load file from: {json_file_path}")  # Dosya yolunu kontrol edin

        try:
                with open(json_file_path, "r") as file:
                 self.records = json.load(file)
                print(f"Loaded coordinates: {self.records}")
                self.is_route_running = True
                self.starting_thread = Thread(target=self.route_write)
                self.starting_thread.start()
        except FileNotFoundError:
                print(f"File {json_file_path} not found.")
        except json.JSONDecodeError:
                print("Error decoding JSON.")

    def stop_selected_route(self):
        if self.is_route_running:
            self.is_route_running = False
            self.starting_thread.join()
            print("Route stopped.")

    def applyLanguageChange(self):
        selected_language = self.comboBox_9.currentText()
        
        # Dil sözlüğü kontrolü
        if selected_language:
            self.setLanguage(selected_language)

    def getLanguageDict(self):
        # Dil sözlüğü burada tanımlanır
        return {
            "English": {
                "groupBox_15": "Farm Options",
                "checkBox_31": "Skill Speed",
                "checkBox_66": "Camera Speed",
                "checkBox_67": "Turn Speed",
                "checkBox_73": "Buggs Bunny",
                "checkBox_78": "Auto Revive",
                "groupBox_5": "Movement Speed",
                "groupBox_9": "Attack Speed",
                "groupBox_16": "Character Scale",
                "pushButton_22": "Start",
                "pushButton_23": "Stop",
                "groupBox_43": "Top Most",
                "groupBox_41": "Servers",
                "label_8": "Window",
                "groupBox_25": "Type",
                "radioButton_4": "Stone",
                "checkBox_74": "Red Poition (F3)",
                "checkBox_75": "Blue Poition (F4)",
                "checkBox_76": "Auto Pickup",
                "checkBox_77": "Auto Skill",
                "groupBox_43": "Map",
                "tab_2": "Fish",
                "groupBox_23": "Route",
                "pushButton_24": "Start Record",
                "pushButton_25": "Stop Record",
                "lineEdit_12": "Route Name",
                "pushButton_28": "DELETE",
                "label_9": "Selected Route:",
                "pushButton_27": "Start",
                "pushButton_29": "Stop",
                "groupBox_10": "Wait Damage",
                "groupBox_11": "Wait Range",
                "groupBox_29": "Weapon Type",
                "groupBox_30": "Armor Type",
                "groupBox_35": "Weapon Type",
                "groupBox_36": "Weapon Type",
                "groupBox_28": "Manuel Teleport",
                "groupBox_19": "Saved Cordinates",
                "lineEdit_23": "Cordinate Name",
                "pushButton_30": "GO",
                "pushButton_31": "SAVE",
                "pushButton_40": "DELETE",
                "checkBox_51": "Stop Bot",
                "checkBox_52": "Voice Alert (beep)",
                "checkBox_53": "Close Game",
                "checkBox_54": "Disable Speed Hack",
                "checkBox_55": "Disable Route",
                "checkBox_59": "Stop Bot",
                "checkBox_58": "Voice Alert (beep)",
                "checkBox_57": "Close Game",
                "checkBox_60": "Disable Speed Hack",
                "checkBox_56": "Disable Route",
                "groupBox_18": "SpamBot",
                "label_21": "Text",
                "label_27": "Seconds",
                "pushButton_36": "START SPAM",
                "pushButton_44": "STOP SPAM",
                "groupBox_32": "Save Settings",
                "lineEdit_29": "Setting Name",
                "pushButton_32": "SAVE",
                "pushButton_33": "DELETE",
                "label_19": "Current Setting:",
                "pushButton_33": "Apply",
                "groupBox_33": "Window Resize",
                "pushButton_34": "Apply",
                "groupBox_44": "Language",
                "pushButton_43": "Apply",
                "groupBox_34": "Timer",
                "lineEdit_27": "minutes",
                "lineEdit_28": "minutes",
                "lineEdit_30": "minutes",
                "checkBox_62": "Disable Route",
                "checkBox_63": "Disable Route",
                "groupBox_40": "UPDATE",
                "pushButton_42": "BOT UPDATE",
                "pushButton_26": "SAVE",
                "checkBox_61": "Close Game",
                "checkBox_62": "Close Bot",
                "checkBox_63": "Close PC",
                "groupBox_7": "Animation Speed",
                "groupBox_39": "Alert",
                "checkBox_68": "PM Notification",
                "checkBox_69": "Skip Hair Color",
                "checkBox_70": "Kill Fish",
                "checkBox_71": "Captcha Solver",
                "checkBox_72": "Auto Revive",
                "pushButton_39": "Auto Screen Scale",
                "groupBox_8": "Delay (Second)",
                "pushButton_37": "Start",
                "pushButton_41": "DELETE",
                "pushButton_38": "Stop",
                "groupBox_37": "Random Time",
                "label_31": "Minimum",
                "label_32": "Maximum",
                "lineEdit_11": "second",
                "lineEdit_13": "second",
                "radioButton_2": "Activate",
                "tab_1": "Fish",
                "tab_2": "Route",
                "tab_3": "Extra",
                "tab_6": "Settings",


            },
        "Türkçe": {
            "groupBox_15": "Farm Seçenekleri",
            "checkBox_31": "Yetenek Hızı",
            "checkBox_66": "Kamera Hızı",
            "checkBox_67": "Dönüş Hızı",
            "checkBox_73": "Buggs Bunny",
            "checkBox_78": "Oto Dirilme",
            "groupBox_5": "Hareket Hızı",
            "groupBox_9": "Saldırı Hızı",
            "groupBox_16": "Karakter Boyutu",
            "pushButton_22": "Başlat",
            "pushButton_23": "Durdur",
            "groupBox_43": "Üstte Tut",
            "groupBox_41": "Sunucu",
            "label_8": "Pencere",
            "pushButton_26": "KAYDET",
            "groupBox_25": "Tip",
            "radioButton_4": "Metin",
            "checkBox_74": "Kırmızı Pot (F3)",
            "checkBox_75": "Mavi Pot (F4)",
            "checkBox_76": "Otomatik Toplama",
            "checkBox_77": "Otomatik Yetenek",
            "groupBox_43": "Harita",
            "tab_2": "Balık",
            "groupBox_23": "Rota",
            "groupBox_37": "Rastgele Zaman",
            "pushButton_24": "Kayıt Başlat",
            "pushButton_25": "Kayıt Durdur",
            "lineEdit_12": "Rota Adı",
            "pushButton_28": "SİL",
            "label_9": "Seçili Rota:",
            "pushButton_27": "Başlat",
            "pushButton_29": "Durdur",
            "groupBox_10": "Bekle Hasar",
            "groupBox_11": "Bekle Mesafe",
            "groupBox_29": "Silah Türü",
            "groupBox_30": "Zırh Türü",
            "groupBox_35": "Saç Tipi",
            "groupBox_36": "Binek",
            "groupBox_28": "Manuel Teleport",
            "groupBox_19": "Kaydedilmiş Koordinatlar",
            "lineEdit_23": "Koordinat Adı",
            "pushButton_30": "Işınlan",
            "pushButton_41": "SİL",
            "pushButton_31": "KAYDET",
            "pushButton_40": "SİL",
            "checkBox_51": "Botu Durdur",
            "checkBox_52": "Sesli Uyarı (bip)",
            "checkBox_53": "Oyunu Kapat",
            "checkBox_54": "Hız Hilesini Devre Dışı Bırak",
            "checkBox_55": "Rotayı Devre Dışı Bırak",
            "checkBox_59": "Botu Durdur",
            "checkBox_58": "Sesli Uyarı (bip)",
            "checkBox_57": "Oyunu Kapat",
            "checkBox_60": "Hız Hilesini Devre Dışı Bırak",
            "checkBox_56": "Rotayı Devre Dışı Bırak",
            "groupBox_18": "SpamBot",
            "checkBox_61": "Oyunu Kapat",
            "checkBox_62": "Botu Kapat",
            "checkBox_63": "PC Kapat",
            "label_21": "Metin",
            "label_27": "Saniye",
            "pushButton_36": "SPAM BAŞLAT",
            "pushButton_44": "SPAM DURDUR",
            "groupBox_32": "Ayarları Kaydet",
            "lineEdit_29": "Ayar Adı",
            "pushButton_32": "KAYDET",
            "pushButton_33": "SİL",
            "label_19": "Mevcut Ayar:",
            "pushButton_33": "Uygula",
            "groupBox_33": "Pencere Boyutu",
            "pushButton_34": "Uygula",
            "groupBox_44": "Dil",
            "pushButton_43": "Uygula",
            "groupBox_34": "Zamanlayıcı",
            "lineEdit_27": "dakika",
            "lineEdit_28": "dakika",
            "lineEdit_30": "dakika",
            "groupBox_40": "GÜNCELLEME",
            "pushButton_42": "BOT GÜNCELLE",
            "groupBox_7": "Animasyon Hızı",
            "groupBox_39": "Uyarı",
            "checkBox_68": "PM Uyarısı",
            "checkBox_69": "Saç Boyasını Atla",
            "checkBox_70": "Balığı Öldür",
            "checkBox_71": "Captcha Çözücü",
            "checkBox_72": "Otomatik Dirilme",
            "pushButton_39": "Pencere Ayarla",
            "groupBox_8": "Gecikme (Saniye)",
            "pushButton_37": "Başlat",
            "pushButton_38": "Durdur",
            "groupBox_37": "Rastgele Zaman",
            "label_31": "Minimum",
            "label_32": "Maksimum",
            "lineEdit_11": "saniye",
            "lineEdit_13": "saniye",
            "radioButton_2": "Uygula",
            "tab_1": "Balık",
            "tab_2": "Rota",
            "tab_3": "Ekstra",
            "tab_6": "Ayarlar",
        }
    }

    def setLanguage(self, language):
        # Dil sözlüğünü al
        language_dict = self.getLanguageDict()


        # Seçilen dile göre tüm widget metinlerini değiştir
        self.groupBox_15.setTitle(language_dict[language]["groupBox_15"])
        self.checkBox_31.setText(language_dict[language]["checkBox_31"])
        self.checkBox_66.setText(language_dict[language]["checkBox_66"])
        self.checkBox_67.setText(language_dict[language]["checkBox_67"])
        self.checkBox_73.setText(language_dict[language]["checkBox_73"])
        self.checkBox_78.setText(language_dict[language]["checkBox_78"])
        self.groupBox_5.setTitle(language_dict[language]["groupBox_5"])
        self.groupBox_9.setTitle(language_dict[language]["groupBox_9"])
        self.groupBox_16.setTitle(language_dict[language]["groupBox_16"])
        self.pushButton_22.setText(language_dict[language]["pushButton_22"])
        self.pushButton_23.setText(language_dict[language]["pushButton_23"])
        self.pushButton_39.setText(language_dict[language]["pushButton_39"])
        self.groupBox_43.setTitle(language_dict[language]["groupBox_43"])
        self.groupBox_41.setTitle(language_dict[language]["groupBox_41"])
        self.label_8.setText(language_dict[language]["label_8"])
        self.label_21.setText(language_dict[language]["label_21"])
        self.label_27.setText(language_dict[language]["label_27"])
        self.groupBox_25.setTitle(language_dict[language]["groupBox_25"])
        self.groupBox_37.setTitle(language_dict[language]["groupBox_37"])
        self.radioButton_4.setText(language_dict[language]["radioButton_4"])
        self.pushButton_26.setText(language_dict[language]["pushButton_26"])
        self.pushButton_27.setText(language_dict[language]["pushButton_27"])
        self.pushButton_29.setText(language_dict[language]["pushButton_29"])
        self.checkBox_59.setText(language_dict[language]["checkBox_59"])
        self.checkBox_58.setText(language_dict[language]["checkBox_58"])
        self.checkBox_57.setText(language_dict[language]["checkBox_57"])
        self.checkBox_60.setText(language_dict[language]["checkBox_60"])
        self.checkBox_56.setText(language_dict[language]["checkBox_56"])
        self.checkBox_61.setText(language_dict[language]["checkBox_61"])
        self.checkBox_62.setText(language_dict[language]["checkBox_62"])
        self.checkBox_63.setText(language_dict[language]["checkBox_63"])
        self.checkBox_68.setText(language_dict[language]["checkBox_68"])
        self.checkBox_69.setText(language_dict[language]["checkBox_69"])
        self.checkBox_70.setText(language_dict[language]["checkBox_70"])
        self.checkBox_71.setText(language_dict[language]["checkBox_71"])
        self.checkBox_72.setText(language_dict[language]["checkBox_72"])
        self.checkBox_74.setText(language_dict[language]["checkBox_74"])
        self.checkBox_75.setText(language_dict[language]["checkBox_75"])
        self.checkBox_76.setText(language_dict[language]["checkBox_76"])
        self.checkBox_77.setText(language_dict[language]["checkBox_77"])
        self.label_9.setText(language_dict[language]["label_9"])
        self.label_19.setText(language_dict[language]["label_19"])
        self.pushButton_24.setText(language_dict[language]["pushButton_24"])
        self.pushButton_25.setText(language_dict[language]["pushButton_25"])
        self.lineEdit_12.setPlaceholderText(language_dict[language]["lineEdit_12"])
        self.pushButton_28.setText(language_dict[language]["pushButton_28"])
        self.pushButton_30.setText(language_dict[language]["pushButton_30"])
        self.pushButton_31.setText(language_dict[language]["pushButton_31"])
        self.pushButton_41.setText(language_dict[language]["pushButton_41"])
        self.checkBox_51.setText(language_dict[language]["checkBox_51"])
        self.checkBox_52.setText(language_dict[language]["checkBox_52"])
        self.checkBox_53.setText(language_dict[language]["checkBox_53"])
        self.checkBox_54.setText(language_dict[language]["checkBox_54"])
        self.checkBox_55.setText(language_dict[language]["checkBox_55"])
        self.groupBox_18.setTitle(language_dict[language]["groupBox_18"])
        self.groupBox_33.setTitle(language_dict[language]["groupBox_33"])
        self.groupBox_34.setTitle(language_dict[language]["groupBox_34"])
        self.pushButton_36.setText(language_dict[language]["pushButton_36"])
        self.pushButton_44.setText(language_dict[language]["pushButton_44"])
        self.groupBox_32.setTitle(language_dict[language]["groupBox_32"])
        self.pushButton_32.setText(language_dict[language]["pushButton_32"])
        self.pushButton_33.setText(language_dict[language]["pushButton_33"])
        self.pushButton_34.setText(language_dict[language]["pushButton_34"])
        self.groupBox_44.setTitle(language_dict[language]["groupBox_44"])
        self.groupBox_28.setTitle(language_dict[language]["groupBox_28"])
        self.groupBox_29.setTitle(language_dict[language]["groupBox_29"])
        self.groupBox_30.setTitle(language_dict[language]["groupBox_30"])
        self.groupBox_35.setTitle(language_dict[language]["groupBox_35"])
        self.groupBox_36.setTitle(language_dict[language]["groupBox_36"])
        self.groupBox_19.setTitle(language_dict[language]["groupBox_19"])
        self.pushButton_43.setText(language_dict[language]["pushButton_43"])
        self.pushButton_41.setText(language_dict[language]["pushButton_41"])
        self.groupBox_40.setTitle(language_dict[language]["groupBox_40"])
        self.pushButton_42.setText(language_dict[language]["pushButton_42"])
        self.groupBox_7.setTitle(language_dict[language]["groupBox_7"])
        self.groupBox_39.setTitle(language_dict[language]["groupBox_39"])
        self.groupBox_8.setTitle(language_dict[language]["groupBox_8"])
        self.pushButton_37.setText(language_dict[language]["pushButton_37"])
        self.pushButton_38.setText(language_dict[language]["pushButton_38"])
        self.pushButton_40.setText(language_dict[language]["pushButton_40"])
        self.groupBox_37.setTitle(language_dict[language]["groupBox_37"])
        self.label_31.setText(language_dict[language]["label_31"])
        self.label_32.setText(language_dict[language]["label_32"])
        self.lineEdit_23.setPlaceholderText(language_dict[language]["lineEdit_23"])
        self.lineEdit_11.setPlaceholderText(language_dict[language]["lineEdit_11"])
        self.lineEdit_13.setPlaceholderText(language_dict[language]["lineEdit_13"])
        self.lineEdit_27.setPlaceholderText(language_dict[language]["lineEdit_27"])
        self.lineEdit_28.setPlaceholderText(language_dict[language]["lineEdit_28"])
        self.lineEdit_29.setPlaceholderText(language_dict[language]["lineEdit_29"])
        self.lineEdit_30.setPlaceholderText(language_dict[language]["lineEdit_30"])
        self.radioButton_2.setText(language_dict[language]["radioButton_2"])
        self.tabWidget.setTabText(1, language_dict[language]["tab_1"])
        self.tabWidget.setTabText(2, language_dict[language]["tab_2"])
        self.tabWidget.setTabText(3, language_dict[language]["tab_3"])
        self.tabWidget.setTabText(6, language_dict[language]["tab_6"])



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = DraggableMainWindow()  # Burada DraggableMainWindow kullanıldı
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


def bot(MainWindow):
    import sys
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
